/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_physx(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_physx(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_physx(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxVisualizationParameter() {
  void * jresult ;
  physx::PxVisualizationParameter *result = 0 ;
  
  result = (physx::PxVisualizationParameter *)new physx::PxVisualizationParameter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxVisualizationParameter(void * jarg1) {
  physx::PxVisualizationParameter *arg1 = (physx::PxVisualizationParameter *) 0 ;
  
  arg1 = (physx::PxVisualizationParameter *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_USE_PARTICLE_SYSTEM_API_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_USE_CLOTH_API_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_ENABLE_INVERTED_STEPPER_FEATURE_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_SUPPORT_GPU_PHYSX_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxPackValidation___set(void * jarg1, char jarg2) {
  PxPackValidation *arg1 = (PxPackValidation *) 0 ;
  char arg2 ;
  
  arg1 = (PxPackValidation *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->_ = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_PxPackValidation___get(void * jarg1) {
  char jresult ;
  PxPackValidation *arg1 = (PxPackValidation *) 0 ;
  char result;
  
  arg1 = (PxPackValidation *)jarg1; 
  result = (char) ((arg1)->_);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxPackValidation_a_set(void * jarg1, long long jarg2) {
  PxPackValidation *arg1 = (PxPackValidation *) 0 ;
  long long arg2 ;
  
  arg1 = (PxPackValidation *)jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->a = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_PxPackValidation_a_get(void * jarg1) {
  long long jresult ;
  PxPackValidation *arg1 = (PxPackValidation *) 0 ;
  long long result;
  
  arg1 = (PxPackValidation *)jarg1; 
  result = (long long) ((arg1)->a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxPackValidation() {
  void * jresult ;
  PxPackValidation *result = 0 ;
  
  result = (PxPackValidation *)new PxPackValidation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxPackValidation(void * jarg1) {
  PxPackValidation *arg1 = (PxPackValidation *) 0 ;
  
  arg1 = (PxPackValidation *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_IS_SPU_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_IS_X64_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_IS_WINDOWS_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_IS_X86_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_IS_INTEL_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_IS_X360_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_IS_PS3_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_NVTX_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PX_IS_PPU_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)((0&&!0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_PHYSICS_VERSION_MAJOR_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_PHYSICS_VERSION_MINOR_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_PHYSICS_VERSION_BUGFIX_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_PHYSICS_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(((3 << 24) +(3 << 16) +(4 << 8) +0));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_MAX_I8_get() {
  int jresult ;
  int result;
  
  result = (int)(127);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_MIN_I8_get() {
  int jresult ;
  int result;
  
  result = (int)((-128));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PX_MAX_U8_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(255U);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_MIN_U8_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_MAX_I16_get() {
  int jresult ;
  int result;
  
  result = (int)(32767);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_MIN_I16_get() {
  int jresult ;
  int result;
  
  result = (int)((-32768));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PX_MAX_U16_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(65535U);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_MIN_U16_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_MAX_I32_get() {
  int jresult ;
  int result;
  
  result = (int)(2147483647);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_MIN_I32_get() {
  int jresult ;
  int result;
  
  result = (int)((-2147483647-1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PX_MAX_U32_get() {
  unsigned int jresult ;
  unsigned int result;
  
  result = (unsigned int)(4294967295U);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PX_MIN_U32_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PX_MAX_F32_get() {
  double jresult ;
  double result;
  
  result = (double)(3.4028234663852885981170418348452e+38);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PX_MAX_REAL_get() {
  double jresult ;
  double result;
  
  result = (double)(3.4028234663852885981170418348452e+38);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxAssertHandler(void * jarg1) {
  physx::PxAssertHandler *arg1 = (physx::PxAssertHandler *) 0 ;
  
  arg1 = (physx::PxAssertHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxGetAssertHandler() {
  void * jresult ;
  physx::PxAssertHandler *result = 0 ;
  
  result = (physx::PxAssertHandler *) &physx::PxGetAssertHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSetAssertHandler(void * jarg1) {
  physx::PxAssertHandler *arg1 = 0 ;
  
  arg1 = (physx::PxAssertHandler *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxAssertHandler & type is null", 0);
    return ;
  } 
  physx::PxSetAssertHandler(*arg1);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxPi_get() {
  float jresult ;
  physx::PxReal result;
  
  result = (physx::PxReal)(physx::PxReal)physx::PxPi;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxHalfPi_get() {
  float jresult ;
  physx::PxReal result;
  
  result = (physx::PxReal)(physx::PxReal)physx::PxHalfPi;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxTwoPi_get() {
  float jresult ;
  physx::PxReal result;
  
  result = (physx::PxReal)(physx::PxReal)physx::PxTwoPi;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxInvPi_get() {
  float jresult ;
  physx::PxReal result;
  
  result = (physx::PxReal)(physx::PxReal)physx::PxInvPi;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxInvTwoPi_get() {
  float jresult ;
  physx::PxReal result;
  
  result = (physx::PxReal)(physx::PxReal)physx::PxInvTwoPi;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxPiDivTwo_get() {
  float jresult ;
  physx::PxReal result;
  
  result = (physx::PxReal)(physx::PxReal)physx::PxPiDivTwo;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxPiDivFour_get() {
  float jresult ;
  physx::PxReal result;
  
  result = (physx::PxReal)(physx::PxReal)physx::PxPiDivFour;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxAbs__SWIG_0(float jarg1) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  result = (physx::PxF32)physx::PxAbs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxEquals(float jarg1, float jarg2, float jarg3) {
  unsigned int jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 arg2 ;
  physx::PxF32 arg3 ;
  bool result;
  
  arg1 = (physx::PxF32)jarg1; 
  arg2 = (physx::PxF32)jarg2; 
  arg3 = (physx::PxF32)jarg3; 
  result = (bool)physx::PxEquals(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PxAbs__SWIG_1(double jarg1) {
  double jresult ;
  physx::PxF64 arg1 ;
  physx::PxF64 result;
  
  arg1 = (physx::PxF64)jarg1; 
  result = (physx::PxF64)physx::PxAbs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxAbs__SWIG_2(int jarg1) {
  int jresult ;
  physx::PxI32 arg1 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxI32)jarg1; 
  result = (physx::PxI32)physx::PxAbs(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxSqrt__SWIG_0(float jarg1) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  result = (physx::PxF32)physx::PxSqrt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PxSqrt__SWIG_1(double jarg1) {
  double jresult ;
  physx::PxF64 arg1 ;
  physx::PxF64 result;
  
  arg1 = (physx::PxF64)jarg1; 
  result = (physx::PxF64)physx::PxSqrt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxRecipSqrt__SWIG_0(float jarg1) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  result = (physx::PxF32)physx::PxRecipSqrt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PxRecipSqrt__SWIG_1(double jarg1) {
  double jresult ;
  physx::PxF64 arg1 ;
  physx::PxF64 result;
  
  arg1 = (physx::PxF64)jarg1; 
  result = (physx::PxF64)physx::PxRecipSqrt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxSin__SWIG_0(float jarg1) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  result = (physx::PxF32)physx::PxSin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PxSin__SWIG_1(double jarg1) {
  double jresult ;
  physx::PxF64 arg1 ;
  physx::PxF64 result;
  
  arg1 = (physx::PxF64)jarg1; 
  result = (physx::PxF64)physx::PxSin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxCos__SWIG_0(float jarg1) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  result = (physx::PxF32)physx::PxCos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PxCos__SWIG_1(double jarg1) {
  double jresult ;
  physx::PxF64 arg1 ;
  physx::PxF64 result;
  
  arg1 = (physx::PxF64)jarg1; 
  result = (physx::PxF64)physx::PxCos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxTan__SWIG_0(float jarg1) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  result = (physx::PxF32)physx::PxTan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PxTan__SWIG_1(double jarg1) {
  double jresult ;
  physx::PxF64 arg1 ;
  physx::PxF64 result;
  
  arg1 = (physx::PxF64)jarg1; 
  result = (physx::PxF64)physx::PxTan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxAsin__SWIG_0(float jarg1) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  result = (physx::PxF32)physx::PxAsin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PxAsin__SWIG_1(double jarg1) {
  double jresult ;
  physx::PxF64 arg1 ;
  physx::PxF64 result;
  
  arg1 = (physx::PxF64)jarg1; 
  result = (physx::PxF64)physx::PxAsin(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxAcos__SWIG_0(float jarg1) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  result = (physx::PxF32)physx::PxAcos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PxAcos__SWIG_1(double jarg1) {
  double jresult ;
  physx::PxF64 arg1 ;
  physx::PxF64 result;
  
  arg1 = (physx::PxF64)jarg1; 
  result = (physx::PxF64)physx::PxAcos(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxAtan__SWIG_0(float jarg1) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  result = (physx::PxF32)physx::PxAtan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PxAtan__SWIG_1(double jarg1) {
  double jresult ;
  physx::PxF64 arg1 ;
  physx::PxF64 result;
  
  arg1 = (physx::PxF64)jarg1; 
  result = (physx::PxF64)physx::PxAtan(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxAtan2__SWIG_0(float jarg1, float jarg2) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 arg2 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  arg2 = (physx::PxF32)jarg2; 
  result = (physx::PxF32)physx::PxAtan2(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PxAtan2__SWIG_1(double jarg1, double jarg2) {
  double jresult ;
  physx::PxF64 arg1 ;
  physx::PxF64 arg2 ;
  physx::PxF64 result;
  
  arg1 = (physx::PxF64)jarg1; 
  arg2 = (physx::PxF64)jarg2; 
  result = (physx::PxF64)physx::PxAtan2(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxIsFinite__SWIG_0(float jarg1) {
  unsigned int jresult ;
  physx::PxF32 arg1 ;
  bool result;
  
  arg1 = (physx::PxF32)jarg1; 
  result = (bool)physx::PxIsFinite(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxIsFinite__SWIG_1(double jarg1) {
  unsigned int jresult ;
  physx::PxF64 arg1 ;
  bool result;
  
  arg1 = (physx::PxF64)jarg1; 
  result = (bool)physx::PxIsFinite(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxFloor(float jarg1) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  result = (physx::PxF32)physx::PxFloor(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxExp(float jarg1) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  result = (physx::PxF32)physx::PxExp(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxCeil(float jarg1) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  result = (physx::PxF32)physx::PxCeil(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxSign(float jarg1) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  result = (physx::PxF32)physx::PxSign(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxPow(float jarg1, float jarg2) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 arg2 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  arg2 = (physx::PxF32)jarg2; 
  result = (physx::PxF32)physx::PxPow(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxLog(float jarg1) {
  float jresult ;
  physx::PxF32 arg1 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxF32)jarg1; 
  result = (physx::PxF32)physx::PxLog(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxVec3__SWIG_0() {
  void * jresult ;
  physx::PxVec3 *result = 0 ;
  
  result = (physx::PxVec3 *)new physx::PxVec3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxVec3__SWIG_1(int jarg1) {
  void * jresult ;
  physx::PxZERO arg1 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxZERO)jarg1; 
  result = (physx::PxVec3 *)new physx::PxVec3(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxVec3__SWIG_2(float jarg1) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  result = (physx::PxVec3 *)new physx::PxVec3(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxVec3__SWIG_3(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  result = (physx::PxVec3 *)new physx::PxVec3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxVec3__SWIG_4(void * jarg1) {
  void * jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = (physx::PxVec3 *)new physx::PxVec3((physx::PxVec3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxVec3_isZero(void * jarg1) {
  unsigned int jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  bool result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  result = (bool)((physx::PxVec3 const *)arg1)->isZero();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxVec3_isFinite(void * jarg1) {
  unsigned int jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  bool result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  result = (bool)((physx::PxVec3 const *)arg1)->isFinite();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxVec3_isNormalized(void * jarg1) {
  unsigned int jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  bool result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  result = (bool)((physx::PxVec3 const *)arg1)->isNormalized();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxVec3_magnitudeSquared(void * jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  result = (physx::PxReal)((physx::PxVec3 const *)arg1)->magnitudeSquared();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxVec3_magnitude(void * jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  result = (physx::PxReal)((physx::PxVec3 const *)arg1)->magnitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxVec3_dot(void * jarg1, void * jarg2) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = (physx::PxReal)((physx::PxVec3 const *)arg1)->dot((physx::PxVec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxVec3_cross(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxVec3 const *)arg1)->cross((physx::PxVec3 const &)*arg2);
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxVec3_getNormalized(void * jarg1) {
  void * jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  result = ((physx::PxVec3 const *)arg1)->getNormalized();
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxVec3_normalize(void * jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  result = (physx::PxReal)(arg1)->normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxVec3_normalizeSafe(void * jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  result = (physx::PxReal)(arg1)->normalizeSafe();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxVec3_normalizeFast(void * jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  result = (physx::PxReal)(arg1)->normalizeFast();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxVec3_multiply(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxVec3 const *)arg1)->multiply((physx::PxVec3 const &)*arg2);
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxVec3_minimum(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxVec3 const *)arg1)->minimum((physx::PxVec3 const &)*arg2);
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxVec3_minElement(void * jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  float result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  result = (float)((physx::PxVec3 const *)arg1)->minElement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxVec3_maximum(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxVec3 const *)arg1)->maximum((physx::PxVec3 const &)*arg2);
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxVec3_maxElement(void * jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  float result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  result = (float)((physx::PxVec3 const *)arg1)->maxElement();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxVec3_abs(void * jarg1) {
  void * jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  result = ((physx::PxVec3 const *)arg1)->abs();
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxVec3_x_set(void * jarg1, float jarg2) {
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxVec3_x_get(void * jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  result = (physx::PxReal) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxVec3_y_set(void * jarg1, float jarg2) {
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxVec3_y_get(void * jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  result = (physx::PxReal) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxVec3_z_set(void * jarg1, float jarg2) {
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxVec3_z_get(void * jarg1) {
  float jresult ;
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  result = (physx::PxReal) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxVec3(void * jarg1) {
  physx::PxVec3 *arg1 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxVec3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxQuat__SWIG_0() {
  void * jresult ;
  physx::PxQuat *result = 0 ;
  
  result = (physx::PxQuat *)new physx::PxQuat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxQuat__SWIG_1(int jarg1) {
  void * jresult ;
  physx::PxIDENTITY arg1 ;
  physx::PxQuat *result = 0 ;
  
  arg1 = (physx::PxIDENTITY)jarg1; 
  result = (physx::PxQuat *)new physx::PxQuat(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxQuat__SWIG_2(float jarg1) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxQuat *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  result = (physx::PxQuat *)new physx::PxQuat(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxQuat__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxReal arg4 ;
  physx::PxQuat *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  result = (physx::PxQuat *)new physx::PxQuat(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxQuat__SWIG_4(float jarg1, void * jarg2) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxQuat *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = (physx::PxQuat *)new physx::PxQuat(arg1,(physx::PxVec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxQuat__SWIG_5(void * jarg1) {
  void * jresult ;
  physx::PxQuat *arg1 = 0 ;
  physx::PxQuat *result = 0 ;
  
  arg1 = (physx::PxQuat *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQuat const & type is null", 0);
    return 0;
  } 
  result = (physx::PxQuat *)new physx::PxQuat((physx::PxQuat const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxQuat__SWIG_6(void * jarg1) {
  void * jresult ;
  physx::PxMat33 *arg1 = 0 ;
  physx::PxQuat *result = 0 ;
  
  arg1 = (physx::PxMat33 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxMat33 const & type is null", 0);
    return 0;
  } 
  result = (physx::PxQuat *)new physx::PxQuat((physx::PxMat33 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxQuat_isFinite(void * jarg1) {
  unsigned int jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  bool result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = (bool)((physx::PxQuat const *)arg1)->isFinite();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxQuat_isUnit(void * jarg1) {
  unsigned int jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  bool result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = (bool)((physx::PxQuat const *)arg1)->isUnit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxQuat_isSane(void * jarg1) {
  unsigned int jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  bool result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = (bool)((physx::PxQuat const *)arg1)->isSane();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxQuat_toRadiansAndUnitAxis(void * jarg1, void * jarg2, void * jarg3) {
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxReal *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  
  arg1 = (physx::PxQuat *)jarg1; 
  arg2 = (physx::PxReal *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxReal & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 & type is null", 0);
    return ;
  } 
  ((physx::PxQuat const *)arg1)->toRadiansAndUnitAxis(*arg2,*arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxQuat_getAngle__SWIG_0(void * jarg1) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = (physx::PxReal)((physx::PxQuat const *)arg1)->getAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxQuat_getAngle__SWIG_1(void * jarg1, void * jarg2) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxQuat *arg2 = 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  arg2 = (physx::PxQuat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQuat const & type is null", 0);
    return 0;
  } 
  result = (physx::PxReal)((physx::PxQuat const *)arg1)->getAngle((physx::PxQuat const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxQuat_magnitudeSquared(void * jarg1) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = (physx::PxReal)((physx::PxQuat const *)arg1)->magnitudeSquared();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxQuat_dot(void * jarg1, void * jarg2) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxQuat *arg2 = 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  arg2 = (physx::PxQuat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQuat const & type is null", 0);
    return 0;
  } 
  result = (physx::PxReal)((physx::PxQuat const *)arg1)->dot((physx::PxQuat const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxQuat_getNormalized(void * jarg1) {
  void * jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxQuat result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = ((physx::PxQuat const *)arg1)->getNormalized();
  jresult = new physx::PxQuat((const physx::PxQuat &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxQuat_magnitude(void * jarg1) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  float result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = (float)((physx::PxQuat const *)arg1)->magnitude();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxQuat_normalize(void * jarg1) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = (physx::PxReal)(arg1)->normalize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxQuat_getConjugate(void * jarg1) {
  void * jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxQuat result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = ((physx::PxQuat const *)arg1)->getConjugate();
  jresult = new physx::PxQuat((const physx::PxQuat &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxQuat_getImaginaryPart(void * jarg1) {
  void * jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = ((physx::PxQuat const *)arg1)->getImaginaryPart();
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxQuat_getBasisVector0(void * jarg1) {
  void * jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = ((physx::PxQuat const *)arg1)->getBasisVector0();
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxQuat_getBasisVector1(void * jarg1) {
  void * jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = ((physx::PxQuat const *)arg1)->getBasisVector1();
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxQuat_getBasisVector2(void * jarg1) {
  void * jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = ((physx::PxQuat const *)arg1)->getBasisVector2();
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxQuat_rotate(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxQuat const *)arg1)->rotate((physx::PxVec3 const &)*arg2);
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxQuat_rotateInv(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxQuat const *)arg1)->rotateInv((physx::PxVec3 const &)*arg2);
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxQuat_createIdentity() {
  void * jresult ;
  physx::PxQuat result;
  
  result = physx::PxQuat::createIdentity();
  jresult = new physx::PxQuat((const physx::PxQuat &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxQuat_x_set(void * jarg1, float jarg2) {
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxQuat *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxQuat_x_get(void * jarg1) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = (physx::PxReal) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxQuat_y_set(void * jarg1, float jarg2) {
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxQuat *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxQuat_y_get(void * jarg1) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = (physx::PxReal) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxQuat_z_set(void * jarg1, float jarg2) {
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxQuat *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxQuat_z_get(void * jarg1) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = (physx::PxReal) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxQuat_w_set(void * jarg1, float jarg2) {
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxQuat *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxQuat_w_get(void * jarg1) {
  float jresult ;
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxQuat *)jarg1; 
  result = (physx::PxReal) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxQuat(void * jarg1) {
  physx::PxQuat *arg1 = (physx::PxQuat *) 0 ;
  
  arg1 = (physx::PxQuat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxPlane__SWIG_0() {
  void * jresult ;
  physx::PxPlane *result = 0 ;
  
  result = (physx::PxPlane *)new physx::PxPlane();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxPlane__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxReal arg4 ;
  physx::PxPlane *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  arg4 = (physx::PxReal)jarg4; 
  result = (physx::PxPlane *)new physx::PxPlane(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxPlane__SWIG_2(void * jarg1, float jarg2) {
  void * jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxReal arg2 ;
  physx::PxPlane *result = 0 ;
  
  arg1 = (physx::PxVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxReal)jarg2; 
  result = (physx::PxPlane *)new physx::PxPlane((physx::PxVec3 const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxPlane__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxPlane *result = 0 ;
  
  arg1 = (physx::PxVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = (physx::PxPlane *)new physx::PxPlane((physx::PxVec3 const &)*arg1,(physx::PxVec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxPlane__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxPlane *result = 0 ;
  
  arg1 = (physx::PxVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = (physx::PxPlane *)new physx::PxPlane((physx::PxVec3 const &)*arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxPlane_distance(void * jarg1, void * jarg2) {
  float jresult ;
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxPlane *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = (physx::PxReal)((physx::PxPlane const *)arg1)->distance((physx::PxVec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxPlane_contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  bool result;
  
  arg1 = (physx::PxPlane *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((physx::PxPlane const *)arg1)->contains((physx::PxVec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxPlane_project(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxPlane *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxPlane const *)arg1)->project((physx::PxVec3 const &)*arg2);
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxPlane_pointInPlane(void * jarg1) {
  void * jresult ;
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxPlane *)jarg1; 
  result = ((physx::PxPlane const *)arg1)->pointInPlane();
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxPlane_normalize(void * jarg1) {
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  
  arg1 = (physx::PxPlane *)jarg1; 
  (arg1)->normalize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxPlane_n_set(void * jarg1, void * jarg2) {
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxPlane *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2; 
  if (arg1) (arg1)->n = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxPlane_n_get(void * jarg1) {
  void * jresult ;
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxPlane *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->n);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxPlane_d_set(void * jarg1, float jarg2) {
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxPlane *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxPlane_d_get(void * jarg1) {
  float jresult ;
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxPlane *)jarg1; 
  result = (physx::PxReal) ((arg1)->d);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxPlane(void * jarg1) {
  physx::PxPlane *arg1 = (physx::PxPlane *) 0 ;
  
  arg1 = (physx::PxPlane *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxTransform_q_set(void * jarg1, void * jarg2) {
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxQuat *arg2 = (physx::PxQuat *) 0 ;
  
  arg1 = (physx::PxTransform *)jarg1; 
  arg2 = (physx::PxQuat *)jarg2; 
  if (arg1) (arg1)->q = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxTransform_q_get(void * jarg1) {
  void * jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxQuat *result = 0 ;
  
  arg1 = (physx::PxTransform *)jarg1; 
  result = (physx::PxQuat *)& ((arg1)->q);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxTransform_p_set(void * jarg1, void * jarg2) {
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxTransform *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2; 
  if (arg1) (arg1)->p = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxTransform_p_get(void * jarg1) {
  void * jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxTransform *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->p);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxTransform__SWIG_0() {
  void * jresult ;
  physx::PxTransform *result = 0 ;
  
  result = (physx::PxTransform *)new physx::PxTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxTransform__SWIG_1(void * jarg1) {
  void * jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = (physx::PxVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = (physx::PxTransform *)new physx::PxTransform((physx::PxVec3 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxTransform__SWIG_2(int jarg1) {
  void * jresult ;
  physx::PxIDENTITY arg1 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = (physx::PxIDENTITY)jarg1; 
  result = (physx::PxTransform *)new physx::PxTransform(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxTransform__SWIG_3(void * jarg1) {
  void * jresult ;
  physx::PxQuat *arg1 = 0 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = (physx::PxQuat *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQuat const & type is null", 0);
    return 0;
  } 
  result = (physx::PxTransform *)new physx::PxTransform((physx::PxQuat const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxTransform__SWIG_4(float jarg1, float jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxQuat arg4 ;
  physx::PxQuat *argp4 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  argp4 = (physx::PxQuat *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxQuat", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (physx::PxTransform *)new physx::PxTransform(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxTransform__SWIG_5(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxReal arg3 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  result = (physx::PxTransform *)new physx::PxTransform(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxTransform__SWIG_6(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxQuat *arg2 = 0 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = (physx::PxVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxQuat *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQuat const & type is null", 0);
    return 0;
  } 
  result = (physx::PxTransform *)new physx::PxTransform((physx::PxVec3 const &)*arg1,(physx::PxQuat const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxTransform__SWIG_7(void * jarg1) {
  void * jresult ;
  physx::PxMat44 *arg1 = 0 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = (physx::PxMat44 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxMat44 const & type is null", 0);
    return 0;
  } 
  result = (physx::PxTransform *)new physx::PxTransform((physx::PxMat44 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxTransform_getInverse(void * jarg1) {
  void * jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxTransform result;
  
  arg1 = (physx::PxTransform *)jarg1; 
  result = ((physx::PxTransform const *)arg1)->getInverse();
  jresult = new physx::PxTransform((const physx::PxTransform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxTransform_transform__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxTransform *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxTransform const *)arg1)->transform((physx::PxVec3 const &)*arg2);
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxTransform_transformInv__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxTransform *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxTransform const *)arg1)->transformInv((physx::PxVec3 const &)*arg2);
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxTransform_rotate(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxTransform *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxTransform const *)arg1)->rotate((physx::PxVec3 const &)*arg2);
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxTransform_rotateInv(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxTransform *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxTransform const *)arg1)->rotateInv((physx::PxVec3 const &)*arg2);
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxTransform_transform__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  physx::PxTransform result;
  
  arg1 = (physx::PxTransform *)jarg1; 
  arg2 = (physx::PxTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxTransform const *)arg1)->transform((physx::PxTransform const &)*arg2);
  jresult = new physx::PxTransform((const physx::PxTransform &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxTransform_isValid(void * jarg1) {
  unsigned int jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  bool result;
  
  arg1 = (physx::PxTransform *)jarg1; 
  result = (bool)((physx::PxTransform const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxTransform_isSane(void * jarg1) {
  unsigned int jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  bool result;
  
  arg1 = (physx::PxTransform *)jarg1; 
  result = (bool)((physx::PxTransform const *)arg1)->isSane();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxTransform_isFinite(void * jarg1) {
  unsigned int jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  bool result;
  
  arg1 = (physx::PxTransform *)jarg1; 
  result = (bool)((physx::PxTransform const *)arg1)->isFinite();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxTransform_transformInv__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxTransform *arg2 = 0 ;
  physx::PxTransform result;
  
  arg1 = (physx::PxTransform *)jarg1; 
  arg2 = (physx::PxTransform *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxTransform const *)arg1)->transformInv((physx::PxTransform const &)*arg2);
  jresult = new physx::PxTransform((const physx::PxTransform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxTransform_createIdentity() {
  void * jresult ;
  physx::PxTransform result;
  
  result = physx::PxTransform::createIdentity();
  jresult = new physx::PxTransform((const physx::PxTransform &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxTransform_transform__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxPlane *arg2 = 0 ;
  physx::PxPlane result;
  
  arg1 = (physx::PxTransform *)jarg1; 
  arg2 = (physx::PxPlane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxPlane const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxTransform const *)arg1)->transform((physx::PxPlane const &)*arg2);
  jresult = new physx::PxPlane((const physx::PxPlane &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxTransform_inverseTransform(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxPlane *arg2 = 0 ;
  physx::PxPlane result;
  
  arg1 = (physx::PxTransform *)jarg1; 
  arg2 = (physx::PxPlane *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxPlane const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxTransform const *)arg1)->inverseTransform((physx::PxPlane const &)*arg2);
  jresult = new physx::PxPlane((const physx::PxPlane &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxTransform_getNormalized(void * jarg1) {
  void * jresult ;
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  physx::PxTransform result;
  
  arg1 = (physx::PxTransform *)jarg1; 
  result = ((physx::PxTransform const *)arg1)->getNormalized();
  jresult = new physx::PxTransform((const physx::PxTransform &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxTransform(void * jarg1) {
  physx::PxTransform *arg1 = (physx::PxTransform *) 0 ;
  
  arg1 = (physx::PxTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxMat33__SWIG_0() {
  void * jresult ;
  physx::PxMat33 *result = 0 ;
  
  result = (physx::PxMat33 *)new physx::PxMat33();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxMat33__SWIG_1(int jarg1) {
  void * jresult ;
  physx::PxIDENTITY arg1 ;
  physx::PxMat33 *result = 0 ;
  
  arg1 = (physx::PxIDENTITY)jarg1; 
  result = (physx::PxMat33 *)new physx::PxMat33(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxMat33__SWIG_2(int jarg1) {
  void * jresult ;
  physx::PxZERO arg1 ;
  physx::PxMat33 *result = 0 ;
  
  arg1 = (physx::PxZERO)jarg1; 
  result = (physx::PxMat33 *)new physx::PxMat33(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxMat33__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxMat33 *result = 0 ;
  
  arg1 = (physx::PxVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = (physx::PxMat33 *)new physx::PxMat33((physx::PxVec3 const &)*arg1,(physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxMat33__SWIG_4(float jarg1) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxMat33 *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  result = (physx::PxMat33 *)new physx::PxMat33(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxMat33__SWIG_5(void * jarg1) {
  void * jresult ;
  physx::PxReal *arg1 ;
  physx::PxMat33 *result = 0 ;
  
  arg1 = (physx::PxReal *)jarg1; 
  result = (physx::PxMat33 *)new physx::PxMat33(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxMat33__SWIG_6(void * jarg1) {
  void * jresult ;
  physx::PxQuat *arg1 = 0 ;
  physx::PxMat33 *result = 0 ;
  
  arg1 = (physx::PxQuat *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQuat const & type is null", 0);
    return 0;
  } 
  result = (physx::PxMat33 *)new physx::PxMat33((physx::PxQuat const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxMat33__SWIG_7(void * jarg1) {
  void * jresult ;
  physx::PxMat33 *arg1 = 0 ;
  physx::PxMat33 *result = 0 ;
  
  arg1 = (physx::PxMat33 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxMat33 const & type is null", 0);
    return 0;
  } 
  result = (physx::PxMat33 *)new physx::PxMat33((physx::PxMat33 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxMat33_createIdentity() {
  void * jresult ;
  physx::PxMat33 result;
  
  result = physx::PxMat33::createIdentity();
  jresult = new physx::PxMat33((const physx::PxMat33 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxMat33_createZero() {
  void * jresult ;
  physx::PxMat33 result;
  
  result = physx::PxMat33::createZero();
  jresult = new physx::PxMat33((const physx::PxMat33 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxMat33_createDiagonal(void * jarg1) {
  void * jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxMat33 result;
  
  arg1 = (physx::PxVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = physx::PxMat33::createDiagonal((physx::PxVec3 const &)*arg1);
  jresult = new physx::PxMat33((const physx::PxMat33 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxMat33_getTranspose(void * jarg1) {
  void * jresult ;
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  physx::PxMat33 result;
  
  arg1 = (physx::PxMat33 *)jarg1; 
  result = ((physx::PxMat33 const *)arg1)->getTranspose();
  jresult = new physx::PxMat33((const physx::PxMat33 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxMat33_getInverse(void * jarg1) {
  void * jresult ;
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  physx::PxMat33 result;
  
  arg1 = (physx::PxMat33 *)jarg1; 
  result = ((physx::PxMat33 const *)arg1)->getInverse();
  jresult = new physx::PxMat33((const physx::PxMat33 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxMat33_getDeterminant(void * jarg1) {
  float jresult ;
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxMat33 *)jarg1; 
  result = (physx::PxReal)((physx::PxMat33 const *)arg1)->getDeterminant();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxMat33_transform(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxMat33 *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxMat33 const *)arg1)->transform((physx::PxVec3 const &)*arg2);
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxMat33_transformTranspose(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxMat33 *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = ((physx::PxMat33 const *)arg1)->transformTranspose((physx::PxVec3 const &)*arg2);
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxMat33_front(void * jarg1) {
  void * jresult ;
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  physx::PxReal *result = 0 ;
  
  arg1 = (physx::PxMat33 *)jarg1; 
  result = (physx::PxReal *)((physx::PxMat33 const *)arg1)->front();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxMat33_column0_set(void * jarg1, void * jarg2) {
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxMat33 *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2; 
  if (arg1) (arg1)->column0 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxMat33_column0_get(void * jarg1) {
  void * jresult ;
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxMat33 *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->column0);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxMat33_column1_set(void * jarg1, void * jarg2) {
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxMat33 *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2; 
  if (arg1) (arg1)->column1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxMat33_column1_get(void * jarg1) {
  void * jresult ;
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxMat33 *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->column1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxMat33_column2_set(void * jarg1, void * jarg2) {
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxMat33 *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2; 
  if (arg1) (arg1)->column2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxMat33_column2_get(void * jarg1) {
  void * jresult ;
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxMat33 *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->column2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxMat33(void * jarg1) {
  physx::PxMat33 *arg1 = (physx::PxMat33 *) 0 ;
  
  arg1 = (physx::PxMat33 *)jarg1; 
  delete arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PX_MAX_BOUNDS_EXTENTS_get() {
  double jresult ;
  double result;
  
  result = (double)((3.4028234663852885981170418348452e+38*0.25));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxBounds3__SWIG_0() {
  void * jresult ;
  physx::PxBounds3 *result = 0 ;
  
  result = (physx::PxBounds3 *)new physx::PxBounds3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxBounds3__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxBounds3 *result = 0 ;
  
  arg1 = (physx::PxVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = (physx::PxBounds3 *)new physx::PxBounds3((physx::PxVec3 const &)*arg1,(physx::PxVec3 const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBounds3_empty() {
  void * jresult ;
  physx::PxBounds3 result;
  
  result = physx::PxBounds3::empty();
  jresult = new physx::PxBounds3((const physx::PxBounds3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBounds3_boundsOfPoints(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxBounds3 result;
  
  arg1 = (physx::PxVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = physx::PxBounds3::boundsOfPoints((physx::PxVec3 const &)*arg1,(physx::PxVec3 const &)*arg2);
  jresult = new physx::PxBounds3((const physx::PxBounds3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBounds3_centerExtents(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxBounds3 result;
  
  arg1 = (physx::PxVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = physx::PxBounds3::centerExtents((physx::PxVec3 const &)*arg1,(physx::PxVec3 const &)*arg2);
  jresult = new physx::PxBounds3((const physx::PxBounds3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBounds3_basisExtent(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  physx::PxVec3 *arg1 = 0 ;
  physx::PxMat33 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxBounds3 result;
  
  arg1 = (physx::PxVec3 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxMat33 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxMat33 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = physx::PxBounds3::basisExtent((physx::PxVec3 const &)*arg1,(physx::PxMat33 const &)*arg2,(physx::PxVec3 const &)*arg3);
  jresult = new physx::PxBounds3((const physx::PxBounds3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBounds3_poseExtent(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxTransform *arg1 = 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxBounds3 result;
  
  arg1 = (physx::PxTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = physx::PxBounds3::poseExtent((physx::PxTransform const &)*arg1,(physx::PxVec3 const &)*arg2);
  jresult = new physx::PxBounds3((const physx::PxBounds3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBounds3_transformSafe__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxMat33 *arg1 = 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  physx::PxBounds3 result;
  
  arg1 = (physx::PxMat33 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxMat33 const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxBounds3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBounds3 const & type is null", 0);
    return 0;
  } 
  result = physx::PxBounds3::transformSafe((physx::PxMat33 const &)*arg1,(physx::PxBounds3 const &)*arg2);
  jresult = new physx::PxBounds3((const physx::PxBounds3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBounds3_transformFast__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxMat33 *arg1 = 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  physx::PxBounds3 result;
  
  arg1 = (physx::PxMat33 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxMat33 const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxBounds3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBounds3 const & type is null", 0);
    return 0;
  } 
  result = physx::PxBounds3::transformFast((physx::PxMat33 const &)*arg1,(physx::PxBounds3 const &)*arg2);
  jresult = new physx::PxBounds3((const physx::PxBounds3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBounds3_transformSafe__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxTransform *arg1 = 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  physx::PxBounds3 result;
  
  arg1 = (physx::PxTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxBounds3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBounds3 const & type is null", 0);
    return 0;
  } 
  result = physx::PxBounds3::transformSafe((physx::PxTransform const &)*arg1,(physx::PxBounds3 const &)*arg2);
  jresult = new physx::PxBounds3((const physx::PxBounds3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBounds3_transformFast__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxTransform *arg1 = 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  physx::PxBounds3 result;
  
  arg1 = (physx::PxTransform *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg2 = (physx::PxBounds3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBounds3 const & type is null", 0);
    return 0;
  } 
  result = physx::PxBounds3::transformFast((physx::PxTransform const &)*arg1,(physx::PxBounds3 const &)*arg2);
  jresult = new physx::PxBounds3((const physx::PxBounds3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBounds3_setEmpty(void * jarg1) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  (arg1)->setEmpty();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBounds3_setMaximal(void * jarg1) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  (arg1)->setMaximal();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBounds3_include__SWIG_0(void * jarg1, void * jarg2) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->include((physx::PxVec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBounds3_include__SWIG_1(void * jarg1, void * jarg2) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  arg2 = (physx::PxBounds3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBounds3 const & type is null", 0);
    return ;
  } 
  (arg1)->include((physx::PxBounds3 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxBounds3_isEmpty(void * jarg1) {
  unsigned int jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  bool result;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  result = (bool)((physx::PxBounds3 const *)arg1)->isEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxBounds3_intersects(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  bool result;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  arg2 = (physx::PxBounds3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBounds3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((physx::PxBounds3 const *)arg1)->intersects((physx::PxBounds3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxBounds3_intersects1D(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  physx::PxU32 arg3 ;
  bool result;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  arg2 = (physx::PxBounds3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBounds3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxU32)jarg3; 
  result = (bool)((physx::PxBounds3 const *)arg1)->intersects1D((physx::PxBounds3 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxBounds3_contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  bool result;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((physx::PxBounds3 const *)arg1)->contains((physx::PxVec3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxBounds3_isInside(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  bool result;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  arg2 = (physx::PxBounds3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBounds3 const & type is null", 0);
    return 0;
  } 
  result = (bool)((physx::PxBounds3 const *)arg1)->isInside((physx::PxBounds3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBounds3_getCenter__SWIG_0(void * jarg1) {
  void * jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  result = ((physx::PxBounds3 const *)arg1)->getCenter();
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxBounds3_getCenter__SWIG_1(void * jarg1, unsigned int jarg2) {
  float jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxReal result;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  result = (physx::PxReal)((physx::PxBounds3 const *)arg1)->getCenter(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxBounds3_getExtents__SWIG_0(void * jarg1, unsigned int jarg2) {
  float jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxReal result;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  result = (physx::PxReal)((physx::PxBounds3 const *)arg1)->getExtents(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBounds3_getDimensions(void * jarg1) {
  void * jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  result = ((physx::PxBounds3 const *)arg1)->getDimensions();
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBounds3_getExtents__SWIG_1(void * jarg1) {
  void * jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  result = ((physx::PxBounds3 const *)arg1)->getExtents();
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBounds3_scaleSafe(void * jarg1, float jarg2) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxF32 arg2 ;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  arg2 = (physx::PxF32)jarg2; 
  (arg1)->scaleSafe(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBounds3_scaleFast(void * jarg1, float jarg2) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxF32 arg2 ;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  arg2 = (physx::PxF32)jarg2; 
  (arg1)->scaleFast(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBounds3_fattenSafe(void * jarg1, float jarg2) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  (arg1)->fattenSafe(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBounds3_fattenFast(void * jarg1, float jarg2) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  (arg1)->fattenFast(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxBounds3_isFinite(void * jarg1) {
  unsigned int jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  bool result;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  result = (bool)((physx::PxBounds3 const *)arg1)->isFinite();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxBounds3_isValid(void * jarg1) {
  unsigned int jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  bool result;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  result = (bool)((physx::PxBounds3 const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBounds3_minimum_set(void * jarg1, void * jarg2) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2; 
  if (arg1) (arg1)->minimum = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBounds3_minimum_get(void * jarg1) {
  void * jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->minimum);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBounds3_maximum_set(void * jarg1, void * jarg2) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2; 
  if (arg1) (arg1)->maximum = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBounds3_maximum_get(void * jarg1) {
  void * jresult ;
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->maximum);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxBounds3(void * jarg1) {
  physx::PxBounds3 *arg1 = (physx::PxBounds3 *) 0 ;
  
  arg1 = (physx::PxBounds3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxPairFlag() {
  void * jresult ;
  physx::PxPairFlag *result = 0 ;
  
  result = (physx::PxPairFlag *)new physx::PxPairFlag();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxPairFlag(void * jarg1) {
  physx::PxPairFlag *arg1 = (physx::PxPairFlag *) 0 ;
  
  arg1 = (physx::PxPairFlag *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxFilterFlag() {
  void * jresult ;
  physx::PxFilterFlag *result = 0 ;
  
  result = (physx::PxFilterFlag *)new physx::PxFilterFlag();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxFilterFlag(void * jarg1) {
  physx::PxFilterFlag *arg1 = (physx::PxFilterFlag *) 0 ;
  
  arg1 = (physx::PxFilterFlag *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxFilterData__SWIG_0(int jarg1) {
  void * jresult ;
  physx::PxEMPTY *arg1 = 0 ;
  physx::PxEMPTY temp1 ;
  physx::PxFilterData *result = 0 ;
  
  temp1 = (physx::PxEMPTY)jarg1; 
  arg1 = &temp1; 
  result = (physx::PxFilterData *)new physx::PxFilterData((physx::PxEMPTY const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxFilterData__SWIG_1() {
  void * jresult ;
  physx::PxFilterData *result = 0 ;
  
  result = (physx::PxFilterData *)new physx::PxFilterData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxFilterData__SWIG_2(unsigned int jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  physx::PxU32 arg1 ;
  physx::PxU32 arg2 ;
  physx::PxU32 arg3 ;
  physx::PxU32 arg4 ;
  physx::PxFilterData *result = 0 ;
  
  arg1 = (physx::PxU32)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  arg4 = (physx::PxU32)jarg4; 
  result = (physx::PxFilterData *)new physx::PxFilterData(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxFilterData_setToDefault(void * jarg1) {
  physx::PxFilterData *arg1 = (physx::PxFilterData *) 0 ;
  
  arg1 = (physx::PxFilterData *)jarg1; 
  (arg1)->setToDefault();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxFilterData_word0_set(void * jarg1, unsigned int jarg2) {
  physx::PxFilterData *arg1 = (physx::PxFilterData *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxFilterData *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->word0 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxFilterData_word0_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxFilterData *arg1 = (physx::PxFilterData *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxFilterData *)jarg1; 
  result = (physx::PxU32) ((arg1)->word0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxFilterData_word1_set(void * jarg1, unsigned int jarg2) {
  physx::PxFilterData *arg1 = (physx::PxFilterData *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxFilterData *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->word1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxFilterData_word1_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxFilterData *arg1 = (physx::PxFilterData *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxFilterData *)jarg1; 
  result = (physx::PxU32) ((arg1)->word1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxFilterData_word2_set(void * jarg1, unsigned int jarg2) {
  physx::PxFilterData *arg1 = (physx::PxFilterData *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxFilterData *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->word2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxFilterData_word2_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxFilterData *arg1 = (physx::PxFilterData *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxFilterData *)jarg1; 
  result = (physx::PxU32) ((arg1)->word2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxFilterData_word3_set(void * jarg1, unsigned int jarg2) {
  physx::PxFilterData *arg1 = (physx::PxFilterData *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxFilterData *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->word3 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxFilterData_word3_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxFilterData *arg1 = (physx::PxFilterData *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxFilterData *)jarg1; 
  result = (physx::PxU32) ((arg1)->word3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxFilterData(void * jarg1) {
  physx::PxFilterData *arg1 = (physx::PxFilterData *) 0 ;
  
  arg1 = (physx::PxFilterData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxFilterObjectType() {
  void * jresult ;
  physx::PxFilterObjectType *result = 0 ;
  
  result = (physx::PxFilterObjectType *)new physx::PxFilterObjectType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxFilterObjectType(void * jarg1) {
  physx::PxFilterObjectType *arg1 = (physx::PxFilterObjectType *) 0 ;
  
  arg1 = (physx::PxFilterObjectType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxFilterObjectFlag() {
  void * jresult ;
  physx::PxFilterObjectFlag *result = 0 ;
  
  result = (physx::PxFilterObjectFlag *)new physx::PxFilterObjectFlag();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxFilterObjectFlag(void * jarg1) {
  physx::PxFilterObjectFlag *arg1 = (physx::PxFilterObjectFlag *) 0 ;
  
  arg1 = (physx::PxFilterObjectFlag *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxGetFilterObjectType(unsigned int jarg1) {
  int jresult ;
  physx::PxFilterObjectAttributes arg1 ;
  physx::PxFilterObjectType::Enum result;
  
  arg1 = (physx::PxFilterObjectAttributes)jarg1; 
  result = (physx::PxFilterObjectType::Enum)physx::PxGetFilterObjectType(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxFilterObjectIsKinematic(unsigned int jarg1) {
  unsigned int jresult ;
  physx::PxFilterObjectAttributes arg1 ;
  bool result;
  
  arg1 = (physx::PxFilterObjectAttributes)jarg1; 
  result = (bool)physx::PxFilterObjectIsKinematic(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxFilterObjectIsTrigger(unsigned int jarg1) {
  unsigned int jresult ;
  physx::PxFilterObjectAttributes arg1 ;
  bool result;
  
  arg1 = (physx::PxFilterObjectAttributes)jarg1; 
  result = (bool)physx::PxFilterObjectIsTrigger(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSimulationFilterCallback_pairFound(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, void * jarg5, void * jarg6, unsigned int jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11) {
  void * jresult ;
  physx::PxSimulationFilterCallback *arg1 = (physx::PxSimulationFilterCallback *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxFilterObjectAttributes arg3 ;
  physx::PxFilterData arg4 ;
  physx::PxActor *arg5 = (physx::PxActor *) 0 ;
  physx::PxShape *arg6 = (physx::PxShape *) 0 ;
  physx::PxFilterObjectAttributes arg7 ;
  physx::PxFilterData arg8 ;
  physx::PxActor *arg9 = (physx::PxActor *) 0 ;
  physx::PxShape *arg10 = (physx::PxShape *) 0 ;
  physx::PxPairFlags *arg11 = 0 ;
  physx::PxFilterData *argp4 ;
  physx::PxFilterData *argp8 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxFilterFlag::Enum,unsigned short > > result;
  
  arg1 = (physx::PxSimulationFilterCallback *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = (physx::PxFilterObjectAttributes)jarg3; 
  argp4 = (physx::PxFilterData *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxFilterData", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (physx::PxActor *)jarg5; 
  arg6 = (physx::PxShape *)jarg6; 
  arg7 = (physx::PxFilterObjectAttributes)jarg7; 
  argp8 = (physx::PxFilterData *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxFilterData", 0);
    return 0;
  }
  arg8 = *argp8; 
  arg9 = (physx::PxActor *)jarg9; 
  arg10 = (physx::PxShape *)jarg10; 
  arg11 = (physx::PxPairFlags *)jarg11;
  if (!arg11) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxPairFlags & type is null", 0);
    return 0;
  } 
  result = (arg1)->pairFound(arg2,arg3,arg4,(physx::PxActor const *)arg5,(physx::PxShape const *)arg6,arg7,arg8,(physx::PxActor const *)arg9,(physx::PxShape const *)arg10,*arg11);
  jresult = new physx::PxFilterFlags((const physx::PxFilterFlags &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationFilterCallback_pairLost(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, void * jarg6, unsigned int jarg7) {
  physx::PxSimulationFilterCallback *arg1 = (physx::PxSimulationFilterCallback *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxFilterObjectAttributes arg3 ;
  physx::PxFilterData arg4 ;
  physx::PxFilterObjectAttributes arg5 ;
  physx::PxFilterData arg6 ;
  bool arg7 ;
  physx::PxFilterData *argp4 ;
  physx::PxFilterData *argp6 ;
  
  arg1 = (physx::PxSimulationFilterCallback *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = (physx::PxFilterObjectAttributes)jarg3; 
  argp4 = (physx::PxFilterData *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxFilterData", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (physx::PxFilterObjectAttributes)jarg5; 
  argp6 = (physx::PxFilterData *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxFilterData", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->pairLost(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationFilterCallback_statusChange(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  physx::PxSimulationFilterCallback *arg1 = (physx::PxSimulationFilterCallback *) 0 ;
  physx::PxU32 *arg2 = 0 ;
  physx::PxPairFlags *arg3 = 0 ;
  physx::PxFilterFlags *arg4 = 0 ;
  bool result;
  
  arg1 = (physx::PxSimulationFilterCallback *)jarg1; 
  arg2 = (physx::PxU32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxU32 & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxPairFlags *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxPairFlags & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxFilterFlags *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxFilterFlags & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->statusChange(*arg2,*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxBroadPhaseType() {
  void * jresult ;
  physx::PxBroadPhaseType *result = 0 ;
  
  result = (physx::PxBroadPhaseType *)new physx::PxBroadPhaseType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxBroadPhaseType(void * jarg1) {
  physx::PxBroadPhaseType *arg1 = (physx::PxBroadPhaseType *) 0 ;
  
  arg1 = (physx::PxBroadPhaseType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxBroadPhaseCallback(void * jarg1) {
  physx::PxBroadPhaseCallback *arg1 = (physx::PxBroadPhaseCallback *) 0 ;
  
  arg1 = (physx::PxBroadPhaseCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBroadPhaseCallback_onObjectOutOfBounds__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  physx::PxBroadPhaseCallback *arg1 = (physx::PxBroadPhaseCallback *) 0 ;
  physx::PxShape *arg2 = 0 ;
  physx::PxActor *arg3 = 0 ;
  
  arg1 = (physx::PxBroadPhaseCallback *)jarg1; 
  arg2 = (physx::PxShape *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxShape & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxActor *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return ;
  } 
  (arg1)->onObjectOutOfBounds(*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBroadPhaseCallback_onObjectOutOfBounds__SWIG_1(void * jarg1, void * jarg2) {
  physx::PxBroadPhaseCallback *arg1 = (physx::PxBroadPhaseCallback *) 0 ;
  physx::PxAggregate *arg2 = 0 ;
  
  arg1 = (physx::PxBroadPhaseCallback *)jarg1; 
  arg2 = (physx::PxAggregate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxAggregate & type is null", 0);
    return ;
  } 
  (arg1)->onObjectOutOfBounds(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBroadPhaseRegion_bounds_set(void * jarg1, void * jarg2) {
  physx::PxBroadPhaseRegion *arg1 = (physx::PxBroadPhaseRegion *) 0 ;
  physx::PxBounds3 *arg2 = (physx::PxBounds3 *) 0 ;
  
  arg1 = (physx::PxBroadPhaseRegion *)jarg1; 
  arg2 = (physx::PxBounds3 *)jarg2; 
  if (arg1) (arg1)->bounds = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBroadPhaseRegion_bounds_get(void * jarg1) {
  void * jresult ;
  physx::PxBroadPhaseRegion *arg1 = (physx::PxBroadPhaseRegion *) 0 ;
  physx::PxBounds3 *result = 0 ;
  
  arg1 = (physx::PxBroadPhaseRegion *)jarg1; 
  result = (physx::PxBounds3 *)& ((arg1)->bounds);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBroadPhaseRegion_userData_set(void * jarg1, void * jarg2) {
  physx::PxBroadPhaseRegion *arg1 = (physx::PxBroadPhaseRegion *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (physx::PxBroadPhaseRegion *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBroadPhaseRegion_userData_get(void * jarg1) {
  void * jresult ;
  physx::PxBroadPhaseRegion *arg1 = (physx::PxBroadPhaseRegion *) 0 ;
  void *result = 0 ;
  
  arg1 = (physx::PxBroadPhaseRegion *)jarg1; 
  result = (void *) ((arg1)->userData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxBroadPhaseRegion() {
  void * jresult ;
  physx::PxBroadPhaseRegion *result = 0 ;
  
  result = (physx::PxBroadPhaseRegion *)new physx::PxBroadPhaseRegion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxBroadPhaseRegion(void * jarg1) {
  physx::PxBroadPhaseRegion *arg1 = (physx::PxBroadPhaseRegion *) 0 ;
  
  arg1 = (physx::PxBroadPhaseRegion *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBroadPhaseRegionInfo_region_set(void * jarg1, void * jarg2) {
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  physx::PxBroadPhaseRegion *arg2 = (physx::PxBroadPhaseRegion *) 0 ;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  arg2 = (physx::PxBroadPhaseRegion *)jarg2; 
  if (arg1) (arg1)->region = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxBroadPhaseRegionInfo_region_get(void * jarg1) {
  void * jresult ;
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  physx::PxBroadPhaseRegion *result = 0 ;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  result = (physx::PxBroadPhaseRegion *)& ((arg1)->region);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBroadPhaseRegionInfo_nbStaticObjects_set(void * jarg1, unsigned int jarg2) {
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbStaticObjects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxBroadPhaseRegionInfo_nbStaticObjects_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbStaticObjects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBroadPhaseRegionInfo_nbDynamicObjects_set(void * jarg1, unsigned int jarg2) {
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbDynamicObjects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxBroadPhaseRegionInfo_nbDynamicObjects_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbDynamicObjects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBroadPhaseRegionInfo_active_set(void * jarg1, unsigned int jarg2) {
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->active = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxBroadPhaseRegionInfo_active_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  bool result;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  result = (bool) ((arg1)->active);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBroadPhaseRegionInfo_overlap_set(void * jarg1, unsigned int jarg2) {
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->overlap = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxBroadPhaseRegionInfo_overlap_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  bool result;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  result = (bool) ((arg1)->overlap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxBroadPhaseRegionInfo() {
  void * jresult ;
  physx::PxBroadPhaseRegionInfo *result = 0 ;
  
  result = (physx::PxBroadPhaseRegionInfo *)new physx::PxBroadPhaseRegionInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxBroadPhaseRegionInfo(void * jarg1) {
  physx::PxBroadPhaseRegionInfo *arg1 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  
  arg1 = (physx::PxBroadPhaseRegionInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBroadPhaseCaps_maxNbRegions_set(void * jarg1, unsigned int jarg2) {
  physx::PxBroadPhaseCaps *arg1 = (physx::PxBroadPhaseCaps *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxBroadPhaseCaps *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbRegions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxBroadPhaseCaps_maxNbRegions_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxBroadPhaseCaps *arg1 = (physx::PxBroadPhaseCaps *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxBroadPhaseCaps *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbRegions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBroadPhaseCaps_maxNbObjects_set(void * jarg1, unsigned int jarg2) {
  physx::PxBroadPhaseCaps *arg1 = (physx::PxBroadPhaseCaps *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxBroadPhaseCaps *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbObjects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxBroadPhaseCaps_maxNbObjects_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxBroadPhaseCaps *arg1 = (physx::PxBroadPhaseCaps *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxBroadPhaseCaps *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbObjects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxBroadPhaseCaps_needsPredefinedBounds_set(void * jarg1, unsigned int jarg2) {
  physx::PxBroadPhaseCaps *arg1 = (physx::PxBroadPhaseCaps *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxBroadPhaseCaps *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->needsPredefinedBounds = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxBroadPhaseCaps_needsPredefinedBounds_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxBroadPhaseCaps *arg1 = (physx::PxBroadPhaseCaps *) 0 ;
  bool result;
  
  arg1 = (physx::PxBroadPhaseCaps *)jarg1; 
  result = (bool) ((arg1)->needsPredefinedBounds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxBroadPhaseCaps() {
  void * jresult ;
  physx::PxBroadPhaseCaps *result = 0 ;
  
  result = (physx::PxBroadPhaseCaps *)new physx::PxBroadPhaseCaps();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxBroadPhaseCaps(void * jarg1) {
  physx::PxBroadPhaseCaps *arg1 = (physx::PxBroadPhaseCaps *) 0 ;
  
  arg1 = (physx::PxBroadPhaseCaps *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxTolerancesScale_length_set(void * jarg1, float jarg2) {
  physx::PxTolerancesScale *arg1 = (physx::PxTolerancesScale *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->length = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxTolerancesScale_length_get(void * jarg1) {
  float jresult ;
  physx::PxTolerancesScale *arg1 = (physx::PxTolerancesScale *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxTolerancesScale *)jarg1; 
  result = (physx::PxReal) ((arg1)->length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxTolerancesScale_mass_set(void * jarg1, float jarg2) {
  physx::PxTolerancesScale *arg1 = (physx::PxTolerancesScale *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->mass = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxTolerancesScale_mass_get(void * jarg1) {
  float jresult ;
  physx::PxTolerancesScale *arg1 = (physx::PxTolerancesScale *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxTolerancesScale *)jarg1; 
  result = (physx::PxReal) ((arg1)->mass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxTolerancesScale_speed_set(void * jarg1, float jarg2) {
  physx::PxTolerancesScale *arg1 = (physx::PxTolerancesScale *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->speed = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxTolerancesScale_speed_get(void * jarg1) {
  float jresult ;
  physx::PxTolerancesScale *arg1 = (physx::PxTolerancesScale *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxTolerancesScale *)jarg1; 
  result = (physx::PxReal) ((arg1)->speed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxTolerancesScale() {
  void * jresult ;
  physx::PxTolerancesScale *result = 0 ;
  
  result = (physx::PxTolerancesScale *)new physx::PxTolerancesScale();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxTolerancesScale_isValid(void * jarg1) {
  unsigned int jresult ;
  physx::PxTolerancesScale *arg1 = (physx::PxTolerancesScale *) 0 ;
  bool result;
  
  arg1 = (physx::PxTolerancesScale *)jarg1; 
  result = (bool)((physx::PxTolerancesScale const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxTolerancesScale(void * jarg1) {
  physx::PxTolerancesScale *arg1 = (physx::PxTolerancesScale *) 0 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxPruningStructure() {
  void * jresult ;
  physx::PxPruningStructure *result = 0 ;
  
  result = (physx::PxPruningStructure *)new physx::PxPruningStructure();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxPruningStructure(void * jarg1) {
  physx::PxPruningStructure *arg1 = (physx::PxPruningStructure *) 0 ;
  
  arg1 = (physx::PxPruningStructure *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxSimulationOrder() {
  void * jresult ;
  physx::PxSimulationOrder *result = 0 ;
  
  result = (physx::PxSimulationOrder *)new physx::PxSimulationOrder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxSimulationOrder(void * jarg1) {
  physx::PxSimulationOrder *arg1 = (physx::PxSimulationOrder *) 0 ;
  
  arg1 = (physx::PxSimulationOrder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxFrictionType() {
  void * jresult ;
  physx::PxFrictionType *result = 0 ;
  
  result = (physx::PxFrictionType *)new physx::PxFrictionType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxFrictionType(void * jarg1) {
  physx::PxFrictionType *arg1 = (physx::PxFrictionType *) 0 ;
  
  arg1 = (physx::PxFrictionType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxSceneFlag() {
  void * jresult ;
  physx::PxSceneFlag *result = 0 ;
  
  result = (physx::PxSceneFlag *)new physx::PxSceneFlag();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxSceneFlag(void * jarg1) {
  physx::PxSceneFlag *arg1 = (physx::PxSceneFlag *) 0 ;
  
  arg1 = (physx::PxSceneFlag *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneLimits_maxNbActors_set(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbActors = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneLimits_maxNbActors_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbActors);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneLimits_maxNbBodies_set(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbBodies = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneLimits_maxNbBodies_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbBodies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneLimits_maxNbStaticShapes_set(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbStaticShapes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneLimits_maxNbStaticShapes_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbStaticShapes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneLimits_maxNbDynamicShapes_set(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbDynamicShapes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneLimits_maxNbDynamicShapes_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbDynamicShapes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneLimits_maxNbAggregates_set(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbAggregates = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneLimits_maxNbAggregates_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbAggregates);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneLimits_maxNbConstraints_set(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbConstraints = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneLimits_maxNbConstraints_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbConstraints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneLimits_maxNbRegions_set(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbRegions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneLimits_maxNbRegions_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbRegions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneLimits_maxNbObjectsPerRegion_set(void * jarg1, unsigned int jarg2) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbObjectsPerRegion = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneLimits_maxNbObjectsPerRegion_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbObjectsPerRegion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxSceneLimits() {
  void * jresult ;
  physx::PxSceneLimits *result = 0 ;
  
  result = (physx::PxSceneLimits *)new physx::PxSceneLimits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneLimits_setToDefault(void * jarg1) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  (arg1)->setToDefault();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneLimits_isValid(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  bool result;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  result = (bool)((physx::PxSceneLimits const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxSceneLimits(void * jarg1) {
  physx::PxSceneLimits *arg1 = (physx::PxSceneLimits *) 0 ;
  
  arg1 = (physx::PxSceneLimits *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_gravity_set(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2; 
  if (arg1) (arg1)->gravity = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_gravity_get(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->gravity);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_simulationEventCallback_set(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSimulationEventCallback *arg2 = (physx::PxSimulationEventCallback *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxSimulationEventCallback *)jarg2; 
  if (arg1) (arg1)->simulationEventCallback = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_simulationEventCallback_get(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSimulationEventCallback *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxSimulationEventCallback *) ((arg1)->simulationEventCallback);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_contactModifyCallback_set(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxContactModifyCallback *arg2 = (physx::PxContactModifyCallback *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxContactModifyCallback *)jarg2; 
  if (arg1) (arg1)->contactModifyCallback = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_contactModifyCallback_get(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxContactModifyCallback *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxContactModifyCallback *) ((arg1)->contactModifyCallback);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_ccdContactModifyCallback_set(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxCCDContactModifyCallback *arg2 = (physx::PxCCDContactModifyCallback *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxCCDContactModifyCallback *)jarg2; 
  if (arg1) (arg1)->ccdContactModifyCallback = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_ccdContactModifyCallback_get(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxCCDContactModifyCallback *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxCCDContactModifyCallback *) ((arg1)->ccdContactModifyCallback);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_filterShaderData_set(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->filterShaderData = (void const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_filterShaderData_get(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  void *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (void *) ((arg1)->filterShaderData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_filterShaderDataSize_set(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->filterShaderDataSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneDesc_filterShaderDataSize_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->filterShaderDataSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_filterShader_set(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSimulationFilterShader arg2 = (physx::PxSimulationFilterShader) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxSimulationFilterShader)jarg2; 
  if (arg1) (arg1)->filterShader = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_filterShader_get(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSimulationFilterShader result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxSimulationFilterShader) ((arg1)->filterShader);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_filterCallback_set(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSimulationFilterCallback *arg2 = (physx::PxSimulationFilterCallback *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxSimulationFilterCallback *)jarg2; 
  if (arg1) (arg1)->filterCallback = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_filterCallback_get(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSimulationFilterCallback *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxSimulationFilterCallback *) ((arg1)->filterCallback);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_broadPhaseType_set(void * jarg1, int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxBroadPhaseType::Enum arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxBroadPhaseType::Enum)jarg2; 
  if (arg1) (arg1)->broadPhaseType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxSceneDesc_broadPhaseType_get(void * jarg1) {
  int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxBroadPhaseType::Enum result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxBroadPhaseType::Enum) ((arg1)->broadPhaseType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_broadPhaseCallback_set(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxBroadPhaseCallback *arg2 = (physx::PxBroadPhaseCallback *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxBroadPhaseCallback *)jarg2; 
  if (arg1) (arg1)->broadPhaseCallback = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_broadPhaseCallback_get(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxBroadPhaseCallback *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxBroadPhaseCallback *) ((arg1)->broadPhaseCallback);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_limits_set(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSceneLimits *arg2 = (physx::PxSceneLimits *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxSceneLimits *)jarg2; 
  if (arg1) (arg1)->limits = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_limits_get(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSceneLimits *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxSceneLimits *)& ((arg1)->limits);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_meshContactMargin_set(void * jarg1, float jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->meshContactMargin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxSceneDesc_meshContactMargin_get(void * jarg1) {
  float jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxReal) ((arg1)->meshContactMargin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_frictionType_set(void * jarg1, int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxFrictionType::Enum arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxFrictionType::Enum)jarg2; 
  if (arg1) (arg1)->frictionType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxSceneDesc_frictionType_get(void * jarg1) {
  int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxFrictionType::Enum result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxFrictionType::Enum) ((arg1)->frictionType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_contactCorrelationDistance_set(void * jarg1, float jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->contactCorrelationDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxSceneDesc_contactCorrelationDistance_get(void * jarg1) {
  float jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxReal) ((arg1)->contactCorrelationDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_bounceThresholdVelocity_set(void * jarg1, float jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->bounceThresholdVelocity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxSceneDesc_bounceThresholdVelocity_get(void * jarg1) {
  float jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxReal) ((arg1)->bounceThresholdVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_frictionOffsetThreshold_set(void * jarg1, float jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->frictionOffsetThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxSceneDesc_frictionOffsetThreshold_get(void * jarg1) {
  float jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxReal) ((arg1)->frictionOffsetThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_flags_set(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSceneFlags *arg2 = (physx::PxSceneFlags *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxSceneFlags *)jarg2; 
  if (arg1) (arg1)->flags = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_flags_get(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSceneFlags *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxSceneFlags *)& ((arg1)->flags);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_cpuDispatcher_set(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxCpuDispatcher *arg2 = (physx::PxCpuDispatcher *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxCpuDispatcher *)jarg2; 
  if (arg1) (arg1)->cpuDispatcher = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_cpuDispatcher_get(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxCpuDispatcher *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxCpuDispatcher *) ((arg1)->cpuDispatcher);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_gpuDispatcher_set(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxGpuDispatcher *arg2 = (physx::PxGpuDispatcher *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxGpuDispatcher *)jarg2; 
  if (arg1) (arg1)->gpuDispatcher = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_gpuDispatcher_get(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxGpuDispatcher *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxGpuDispatcher *) ((arg1)->gpuDispatcher);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_spuDispatcher_set(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSpuDispatcher *arg2 = (physx::PxSpuDispatcher *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxSpuDispatcher *)jarg2; 
  if (arg1) (arg1)->spuDispatcher = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_spuDispatcher_get(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSpuDispatcher *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxSpuDispatcher *) ((arg1)->spuDispatcher);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_staticStructure_set(void * jarg1, int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxPruningStructure::Enum arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxPruningStructure::Enum)jarg2; 
  if (arg1) (arg1)->staticStructure = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxSceneDesc_staticStructure_get(void * jarg1) {
  int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxPruningStructure::Enum result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxPruningStructure::Enum) ((arg1)->staticStructure);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_dynamicStructure_set(void * jarg1, int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxPruningStructure::Enum arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxPruningStructure::Enum)jarg2; 
  if (arg1) (arg1)->dynamicStructure = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxSceneDesc_dynamicStructure_get(void * jarg1) {
  int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxPruningStructure::Enum result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxPruningStructure::Enum) ((arg1)->dynamicStructure);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_dynamicTreeRebuildRateHint_set(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->dynamicTreeRebuildRateHint = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneDesc_dynamicTreeRebuildRateHint_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->dynamicTreeRebuildRateHint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_userData_set(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_userData_get(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  void *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (void *) ((arg1)->userData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_solverBatchSize_set(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->solverBatchSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneDesc_solverBatchSize_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->solverBatchSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_nbContactDataBlocks_set(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbContactDataBlocks = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneDesc_nbContactDataBlocks_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbContactDataBlocks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_maxNbContactDataBlocks_set(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->maxNbContactDataBlocks = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneDesc_maxNbContactDataBlocks_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->maxNbContactDataBlocks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_contactReportStreamBufferSize_set(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->contactReportStreamBufferSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneDesc_contactReportStreamBufferSize_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->contactReportStreamBufferSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_ccdMaxPasses_set(void * jarg1, unsigned int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->ccdMaxPasses = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneDesc_ccdMaxPasses_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxU32) ((arg1)->ccdMaxPasses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_simulationOrder_set(void * jarg1, int jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSimulationOrder::Enum arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxSimulationOrder::Enum)jarg2; 
  if (arg1) (arg1)->simulationOrder = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxSceneDesc_simulationOrder_get(void * jarg1) {
  int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxSimulationOrder::Enum result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxSimulationOrder::Enum) ((arg1)->simulationOrder);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_wakeCounterResetValue_set(void * jarg1, float jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->wakeCounterResetValue = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxSceneDesc_wakeCounterResetValue_get(void * jarg1) {
  float jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxReal) ((arg1)->wakeCounterResetValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_sanityBounds_set(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxBounds3 *arg2 = (physx::PxBounds3 *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxBounds3 *)jarg2; 
  if (arg1) (arg1)->sanityBounds = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_sanityBounds_get(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxBounds3 *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxBounds3 *)& ((arg1)->sanityBounds);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxSceneDesc(void * jarg1) {
  void * jresult ;
  physx::PxTolerancesScale *arg1 = 0 ;
  physx::PxSceneDesc *result = 0 ;
  
  arg1 = (physx::PxTolerancesScale *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTolerancesScale const & type is null", 0);
    return 0;
  } 
  result = (physx::PxSceneDesc *)new physx::PxSceneDesc((physx::PxTolerancesScale const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSceneDesc_setToDefault(void * jarg1, void * jarg2) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxTolerancesScale *arg2 = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  arg2 = (physx::PxTolerancesScale *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTolerancesScale const & type is null", 0);
    return ;
  } 
  (arg1)->setToDefault((physx::PxTolerancesScale const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSceneDesc_isValid(void * jarg1) {
  unsigned int jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  bool result;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (bool)((physx::PxSceneDesc const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSceneDesc_getTolerancesScale(void * jarg1) {
  void * jresult ;
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  physx::PxTolerancesScale *result = 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  result = (physx::PxTolerancesScale *) &((physx::PxSceneDesc const *)arg1)->getTolerancesScale();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxSceneDesc(void * jarg1) {
  physx::PxSceneDesc *arg1 = (physx::PxSceneDesc *) 0 ;
  
  arg1 = (physx::PxSceneDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_nbActiveConstraints_set(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbActiveConstraints = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationStatistics_nbActiveConstraints_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbActiveConstraints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_nbActiveDynamicBodies_set(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbActiveDynamicBodies = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationStatistics_nbActiveDynamicBodies_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbActiveDynamicBodies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_nbActiveKinematicBodies_set(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbActiveKinematicBodies = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationStatistics_nbActiveKinematicBodies_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbActiveKinematicBodies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_nbStaticBodies_set(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbStaticBodies = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationStatistics_nbStaticBodies_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbStaticBodies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_nbDynamicBodies_set(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbDynamicBodies = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationStatistics_nbDynamicBodies_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbDynamicBodies);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_nbShapes_set(void * jarg1, void * jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 *arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32 *)jarg2; 
  {
    size_t ii;
    physx::PxU32 *b = (physx::PxU32 *) arg1->nbShapes;
    for (ii = 0; ii < (size_t)PxGeometryType::eGEOMETRY_COUNT; ii++) b[ii] = *((physx::PxU32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSimulationStatistics_nbShapes_get(void * jarg1) {
  void * jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 *result = 0 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32 *)(physx::PxU32 *) ((arg1)->nbShapes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_nbAxisSolverConstraints_set(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->nbAxisSolverConstraints = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationStatistics_nbAxisSolverConstraints_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->nbAxisSolverConstraints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_compressedContactSize_set(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->compressedContactSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationStatistics_compressedContactSize_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->compressedContactSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_requiredContactConstraintMemory_set(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->requiredContactConstraintMemory = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationStatistics_requiredContactConstraintMemory_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->requiredContactConstraintMemory);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_peakConstraintMemory_set(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->peakConstraintMemory = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationStatistics_peakConstraintMemory_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->peakConstraintMemory);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationStatistics_getNbBroadPhaseAdds(void * jarg1, int jarg2) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxSimulationStatistics::VolumeType arg2 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxSimulationStatistics::VolumeType)jarg2; 
  result = (physx::PxU32)((physx::PxSimulationStatistics const *)arg1)->getNbBroadPhaseAdds(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationStatistics_getNbBroadPhaseRemoves(void * jarg1, int jarg2) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxSimulationStatistics::VolumeType arg2 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxSimulationStatistics::VolumeType)jarg2; 
  result = (physx::PxU32)((physx::PxSimulationStatistics const *)arg1)->getNbBroadPhaseRemoves(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationStatistics_getRbPairStats(void * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxSimulationStatistics::RbPairStatsType arg2 ;
  PxGeometryType::Enum arg3 ;
  PxGeometryType::Enum arg4 ;
  PxGeometryType::Enum *argp3 ;
  PxGeometryType::Enum *argp4 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxSimulationStatistics::RbPairStatsType)jarg2; 
  argp3 = (PxGeometryType::Enum *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null PxGeometryType::Enum", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (PxGeometryType::Enum *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null PxGeometryType::Enum", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (physx::PxU32)((physx::PxSimulationStatistics const *)arg1)->getRbPairStats(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxSimulationStatistics() {
  void * jresult ;
  physx::PxSimulationStatistics *result = 0 ;
  
  result = (physx::PxSimulationStatistics *)new physx::PxSimulationStatistics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_nbBroadPhaseAdds_set(void * jarg1, void * jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 *arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32 *)jarg2; 
  {
    size_t ii;
    physx::PxU32 *b = (physx::PxU32 *) arg1->nbBroadPhaseAdds;
    for (ii = 0; ii < (size_t)physx::PxSimulationStatistics::eVOLUME_COUNT; ii++) b[ii] = *((physx::PxU32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSimulationStatistics_nbBroadPhaseAdds_get(void * jarg1) {
  void * jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 *result = 0 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32 *)(physx::PxU32 *) ((arg1)->nbBroadPhaseAdds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_nbBroadPhaseRemoves_set(void * jarg1, void * jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 *arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32 *)jarg2; 
  {
    size_t ii;
    physx::PxU32 *b = (physx::PxU32 *) arg1->nbBroadPhaseRemoves;
    for (ii = 0; ii < (size_t)physx::PxSimulationStatistics::eVOLUME_COUNT; ii++) b[ii] = *((physx::PxU32 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSimulationStatistics_nbBroadPhaseRemoves_get(void * jarg1) {
  void * jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 *result = 0 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32 *)(physx::PxU32 *) ((arg1)->nbBroadPhaseRemoves);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_nbDiscreteContactPairs_set(void * jarg1, void * jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 (*arg2)[PxGeometryType::eGEOMETRY_COUNT] ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])jarg2; 
  {
    physx::PxU32 (*inp)[PxGeometryType::eGEOMETRY_COUNT] = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])(arg2);
    physx::PxU32 (*dest)[PxGeometryType::eGEOMETRY_COUNT] = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])(arg1->nbDiscreteContactPairs);
    size_t ii = 0;
    for (; ii < PxGeometryType::eGEOMETRY_COUNT; ++ii) {
      physx::PxU32 *ip = inp[ii];
      physx::PxU32 *dp = dest[ii];
      size_t jj = 0;
      for (; jj < PxGeometryType::eGEOMETRY_COUNT; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSimulationStatistics_nbDiscreteContactPairs_get(void * jarg1) {
  void * jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 (*result)[PxGeometryType::eGEOMETRY_COUNT] = 0 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])(physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT]) ((arg1)->nbDiscreteContactPairs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_nbCCDPairs_set(void * jarg1, void * jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 (*arg2)[PxGeometryType::eGEOMETRY_COUNT] ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])jarg2; 
  {
    physx::PxU32 (*inp)[PxGeometryType::eGEOMETRY_COUNT] = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])(arg2);
    physx::PxU32 (*dest)[PxGeometryType::eGEOMETRY_COUNT] = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])(arg1->nbCCDPairs);
    size_t ii = 0;
    for (; ii < PxGeometryType::eGEOMETRY_COUNT; ++ii) {
      physx::PxU32 *ip = inp[ii];
      physx::PxU32 *dp = dest[ii];
      size_t jj = 0;
      for (; jj < PxGeometryType::eGEOMETRY_COUNT; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSimulationStatistics_nbCCDPairs_get(void * jarg1) {
  void * jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 (*result)[PxGeometryType::eGEOMETRY_COUNT] = 0 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])(physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT]) ((arg1)->nbCCDPairs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_nbModifiedContactPairs_set(void * jarg1, void * jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 (*arg2)[PxGeometryType::eGEOMETRY_COUNT] ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])jarg2; 
  {
    physx::PxU32 (*inp)[PxGeometryType::eGEOMETRY_COUNT] = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])(arg2);
    physx::PxU32 (*dest)[PxGeometryType::eGEOMETRY_COUNT] = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])(arg1->nbModifiedContactPairs);
    size_t ii = 0;
    for (; ii < PxGeometryType::eGEOMETRY_COUNT; ++ii) {
      physx::PxU32 *ip = inp[ii];
      physx::PxU32 *dp = dest[ii];
      size_t jj = 0;
      for (; jj < PxGeometryType::eGEOMETRY_COUNT; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSimulationStatistics_nbModifiedContactPairs_get(void * jarg1) {
  void * jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 (*result)[PxGeometryType::eGEOMETRY_COUNT] = 0 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])(physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT]) ((arg1)->nbModifiedContactPairs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_nbTriggerPairs_set(void * jarg1, void * jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 (*arg2)[PxGeometryType::eGEOMETRY_COUNT] ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])jarg2; 
  {
    physx::PxU32 (*inp)[PxGeometryType::eGEOMETRY_COUNT] = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])(arg2);
    physx::PxU32 (*dest)[PxGeometryType::eGEOMETRY_COUNT] = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])(arg1->nbTriggerPairs);
    size_t ii = 0;
    for (; ii < PxGeometryType::eGEOMETRY_COUNT; ++ii) {
      physx::PxU32 *ip = inp[ii];
      physx::PxU32 *dp = dest[ii];
      size_t jj = 0;
      for (; jj < PxGeometryType::eGEOMETRY_COUNT; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxSimulationStatistics_nbTriggerPairs_get(void * jarg1) {
  void * jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 (*result)[PxGeometryType::eGEOMETRY_COUNT] = 0 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT])(physx::PxU32 (*)[PxGeometryType::eGEOMETRY_COUNT]) ((arg1)->nbTriggerPairs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_totalDiscreteContactPairsAnyShape_set(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->totalDiscreteContactPairsAnyShape = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationStatistics_totalDiscreteContactPairsAnyShape_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->totalDiscreteContactPairsAnyShape);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_particlesGpuMeshCacheSize_set(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->particlesGpuMeshCacheSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationStatistics_particlesGpuMeshCacheSize_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->particlesGpuMeshCacheSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_particlesGpuMeshCacheUsed_set(void * jarg1, unsigned int jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->particlesGpuMeshCacheUsed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSimulationStatistics_particlesGpuMeshCacheUsed_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxU32) ((arg1)->particlesGpuMeshCacheUsed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSimulationStatistics_particlesGpuMeshCacheHitrate_set(void * jarg1, float jarg2) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->particlesGpuMeshCacheHitrate = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxSimulationStatistics_particlesGpuMeshCacheHitrate_get(void * jarg1) {
  float jresult ;
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  result = (physx::PxReal) ((arg1)->particlesGpuMeshCacheHitrate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxSimulationStatistics(void * jarg1) {
  physx::PxSimulationStatistics *arg1 = (physx::PxSimulationStatistics *) 0 ;
  
  arg1 = (physx::PxSimulationStatistics *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxHitFlag() {
  void * jresult ;
  physx::PxHitFlag *result = 0 ;
  
  result = (physx::PxHitFlag *)new physx::PxHitFlag();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxHitFlag(void * jarg1) {
  physx::PxHitFlag *arg1 = (physx::PxHitFlag *) 0 ;
  
  arg1 = (physx::PxHitFlag *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxActorShape__SWIG_0() {
  void * jresult ;
  physx::PxActorShape *result = 0 ;
  
  result = (physx::PxActorShape *)new physx::PxActorShape();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxActorShape__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxRigidActor *arg1 = (physx::PxRigidActor *) 0 ;
  physx::PxShape *arg2 = (physx::PxShape *) 0 ;
  physx::PxActorShape *result = 0 ;
  
  arg1 = (physx::PxRigidActor *)jarg1; 
  arg2 = (physx::PxShape *)jarg2; 
  result = (physx::PxActorShape *)new physx::PxActorShape(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxActorShape_actor_set(void * jarg1, void * jarg2) {
  physx::PxActorShape *arg1 = (physx::PxActorShape *) 0 ;
  physx::PxRigidActor *arg2 = (physx::PxRigidActor *) 0 ;
  
  arg1 = (physx::PxActorShape *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2; 
  if (arg1) (arg1)->actor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxActorShape_actor_get(void * jarg1) {
  void * jresult ;
  physx::PxActorShape *arg1 = (physx::PxActorShape *) 0 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxActorShape *)jarg1; 
  result = (physx::PxRigidActor *) ((arg1)->actor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxActorShape_shape_set(void * jarg1, void * jarg2) {
  physx::PxActorShape *arg1 = (physx::PxActorShape *) 0 ;
  physx::PxShape *arg2 = (physx::PxShape *) 0 ;
  
  arg1 = (physx::PxActorShape *)jarg1; 
  arg2 = (physx::PxShape *)jarg2; 
  if (arg1) (arg1)->shape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxActorShape_shape_get(void * jarg1) {
  void * jresult ;
  physx::PxActorShape *arg1 = (physx::PxActorShape *) 0 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxActorShape *)jarg1; 
  result = (physx::PxShape *) ((arg1)->shape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxActorShape(void * jarg1) {
  physx::PxActorShape *arg1 = (physx::PxActorShape *) 0 ;
  
  arg1 = (physx::PxActorShape *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxQueryHit() {
  void * jresult ;
  physx::PxQueryHit *result = 0 ;
  
  result = (physx::PxQueryHit *)new physx::PxQueryHit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxQueryHit_faceIndex_set(void * jarg1, unsigned int jarg2) {
  physx::PxQueryHit *arg1 = (physx::PxQueryHit *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxQueryHit *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->faceIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxQueryHit_faceIndex_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxQueryHit *arg1 = (physx::PxQueryHit *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxQueryHit *)jarg1; 
  result = (physx::PxU32) ((arg1)->faceIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxQueryHit(void * jarg1) {
  physx::PxQueryHit *arg1 = (physx::PxQueryHit *) 0 ;
  
  arg1 = (physx::PxQueryHit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxLocationHit() {
  void * jresult ;
  physx::PxLocationHit *result = 0 ;
  
  result = (physx::PxLocationHit *)new physx::PxLocationHit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxLocationHit_hadInitialOverlap(void * jarg1) {
  unsigned int jresult ;
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  bool result;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  result = (bool)((physx::PxLocationHit const *)arg1)->hadInitialOverlap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxLocationHit_flags_set(void * jarg1, void * jarg2) {
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxHitFlags *arg2 = (physx::PxHitFlags *) 0 ;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  arg2 = (physx::PxHitFlags *)jarg2; 
  if (arg1) (arg1)->flags = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxLocationHit_flags_get(void * jarg1) {
  void * jresult ;
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxHitFlags *result = 0 ;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  result = (physx::PxHitFlags *)& ((arg1)->flags);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxLocationHit_position_set(void * jarg1, void * jarg2) {
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2; 
  if (arg1) (arg1)->position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxLocationHit_position_get(void * jarg1) {
  void * jresult ;
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxLocationHit_normal_set(void * jarg1, void * jarg2) {
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxVec3 *arg2 = (physx::PxVec3 *) 0 ;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2; 
  if (arg1) (arg1)->normal = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxLocationHit_normal_get(void * jarg1) {
  void * jresult ;
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxVec3 *result = 0 ;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  result = (physx::PxVec3 *)& ((arg1)->normal);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxLocationHit_distance_set(void * jarg1, float jarg2) {
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxF32 arg2 ;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  arg2 = (physx::PxF32)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxLocationHit_distance_get(void * jarg1) {
  float jresult ;
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  result = (physx::PxF32) ((arg1)->distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxLocationHit(void * jarg1) {
  physx::PxLocationHit *arg1 = (physx::PxLocationHit *) 0 ;
  
  arg1 = (physx::PxLocationHit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxRaycastHit() {
  void * jresult ;
  physx::PxRaycastHit *result = 0 ;
  
  result = (physx::PxRaycastHit *)new physx::PxRaycastHit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxRaycastHit_u_set(void * jarg1, float jarg2) {
  physx::PxRaycastHit *arg1 = (physx::PxRaycastHit *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRaycastHit *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->u = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxRaycastHit_u_get(void * jarg1) {
  float jresult ;
  physx::PxRaycastHit *arg1 = (physx::PxRaycastHit *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRaycastHit *)jarg1; 
  result = (physx::PxReal) ((arg1)->u);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxRaycastHit_v_set(void * jarg1, float jarg2) {
  physx::PxRaycastHit *arg1 = (physx::PxRaycastHit *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxRaycastHit *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->v = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxRaycastHit_v_get(void * jarg1) {
  float jresult ;
  physx::PxRaycastHit *arg1 = (physx::PxRaycastHit *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxRaycastHit *)jarg1; 
  result = (physx::PxReal) ((arg1)->v);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxRaycastHit(void * jarg1) {
  physx::PxRaycastHit *arg1 = (physx::PxRaycastHit *) 0 ;
  
  arg1 = (physx::PxRaycastHit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxOverlapHit_padTo16Bytes_set(void * jarg1, unsigned int jarg2) {
  physx::PxOverlapHit *arg1 = (physx::PxOverlapHit *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxOverlapHit *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->padTo16Bytes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxOverlapHit_padTo16Bytes_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxOverlapHit *arg1 = (physx::PxOverlapHit *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxOverlapHit *)jarg1; 
  result = (physx::PxU32) ((arg1)->padTo16Bytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxOverlapHit() {
  void * jresult ;
  physx::PxOverlapHit *result = 0 ;
  
  result = (physx::PxOverlapHit *)new physx::PxOverlapHit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxOverlapHit(void * jarg1) {
  physx::PxOverlapHit *arg1 = (physx::PxOverlapHit *) 0 ;
  
  arg1 = (physx::PxOverlapHit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxSweepHit() {
  void * jresult ;
  physx::PxSweepHit *result = 0 ;
  
  result = (physx::PxSweepHit *)new physx::PxSweepHit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxSweepHit_padTo16Bytes_set(void * jarg1, unsigned int jarg2) {
  physx::PxSweepHit *arg1 = (physx::PxSweepHit *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxSweepHit *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->padTo16Bytes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxSweepHit_padTo16Bytes_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxSweepHit *arg1 = (physx::PxSweepHit *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxSweepHit *)jarg1; 
  result = (physx::PxU32) ((arg1)->padTo16Bytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxSweepHit(void * jarg1) {
  physx::PxSweepHit *arg1 = (physx::PxSweepHit *) 0 ;
  
  arg1 = (physx::PxSweepHit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxQueryFlag() {
  void * jresult ;
  physx::PxQueryFlag *result = 0 ;
  
  result = (physx::PxQueryFlag *)new physx::PxQueryFlag();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxQueryFlag(void * jarg1) {
  physx::PxQueryFlag *arg1 = (physx::PxQueryFlag *) 0 ;
  
  arg1 = (physx::PxQueryFlag *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxQueryHitType() {
  void * jresult ;
  physx::PxQueryHitType *result = 0 ;
  
  result = (physx::PxQueryHitType *)new physx::PxQueryHitType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxQueryHitType(void * jarg1) {
  physx::PxQueryHitType *arg1 = (physx::PxQueryHitType *) 0 ;
  
  arg1 = (physx::PxQueryHitType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxQueryFilterData__SWIG_0() {
  void * jresult ;
  physx::PxQueryFilterData *result = 0 ;
  
  result = (physx::PxQueryFilterData *)new physx::PxQueryFilterData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxQueryFilterData__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxFilterData *arg1 = 0 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxQueryFlag::Enum,unsigned short > > arg2 ;
  physx::PxQueryFlags *argp2 ;
  physx::PxQueryFilterData *result = 0 ;
  
  arg1 = (physx::PxFilterData *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxFilterData const & type is null", 0);
    return 0;
  } 
  argp2 = (physx::PxQueryFlags *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxQueryFlags", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (physx::PxQueryFilterData *)new physx::PxQueryFilterData((physx::PxFilterData const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxQueryFilterData__SWIG_2(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxQueryFlag::Enum,unsigned short > > arg1 ;
  physx::PxQueryFlags *argp1 ;
  physx::PxQueryFilterData *result = 0 ;
  
  argp1 = (physx::PxQueryFlags *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxQueryFlags", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (physx::PxQueryFilterData *)new physx::PxQueryFilterData(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxQueryFilterData_data_set(void * jarg1, void * jarg2) {
  physx::PxQueryFilterData *arg1 = (physx::PxQueryFilterData *) 0 ;
  physx::PxFilterData *arg2 = (physx::PxFilterData *) 0 ;
  
  arg1 = (physx::PxQueryFilterData *)jarg1; 
  arg2 = (physx::PxFilterData *)jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxQueryFilterData_data_get(void * jarg1) {
  void * jresult ;
  physx::PxQueryFilterData *arg1 = (physx::PxQueryFilterData *) 0 ;
  physx::PxFilterData *result = 0 ;
  
  arg1 = (physx::PxQueryFilterData *)jarg1; 
  result = (physx::PxFilterData *)& ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxQueryFilterData_flags_set(void * jarg1, void * jarg2) {
  physx::PxQueryFilterData *arg1 = (physx::PxQueryFilterData *) 0 ;
  physx::PxQueryFlags *arg2 = (physx::PxQueryFlags *) 0 ;
  
  arg1 = (physx::PxQueryFilterData *)jarg1; 
  arg2 = (physx::PxQueryFlags *)jarg2; 
  if (arg1) (arg1)->flags = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxQueryFilterData_flags_get(void * jarg1) {
  void * jresult ;
  physx::PxQueryFilterData *arg1 = (physx::PxQueryFilterData *) 0 ;
  physx::PxQueryFlags *result = 0 ;
  
  arg1 = (physx::PxQueryFilterData *)jarg1; 
  result = (physx::PxQueryFlags *)& ((arg1)->flags);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxQueryFilterData_clientId_set(void * jarg1, void * jarg2) {
  physx::PxQueryFilterData *arg1 = (physx::PxQueryFilterData *) 0 ;
  PxClientID arg2 ;
  PxClientID *argp2 ;
  
  arg1 = (physx::PxQueryFilterData *)jarg1; 
  argp2 = (PxClientID *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null PxClientID", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->clientId = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxQueryFilterData_clientId_get(void * jarg1) {
  void * jresult ;
  physx::PxQueryFilterData *arg1 = (physx::PxQueryFilterData *) 0 ;
  PxClientID result;
  
  arg1 = (physx::PxQueryFilterData *)jarg1; 
  result =  ((arg1)->clientId);
  jresult = new PxClientID((const PxClientID &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxQueryFilterData(void * jarg1) {
  physx::PxQueryFilterData *arg1 = (physx::PxQueryFilterData *) 0 ;
  
  arg1 = (physx::PxQueryFilterData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxQueryFilterCallback_preFilter(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  physx::PxQueryFilterCallback *arg1 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxFilterData *arg2 = 0 ;
  physx::PxShape *arg3 = (physx::PxShape *) 0 ;
  physx::PxRigidActor *arg4 = (physx::PxRigidActor *) 0 ;
  physx::PxHitFlags *arg5 = 0 ;
  physx::PxQueryHitType::Enum result;
  
  arg1 = (physx::PxQueryFilterCallback *)jarg1; 
  arg2 = (physx::PxFilterData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxFilterData const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxShape *)jarg3; 
  arg4 = (physx::PxRigidActor *)jarg4; 
  arg5 = (physx::PxHitFlags *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxHitFlags & type is null", 0);
    return 0;
  } 
  result = (physx::PxQueryHitType::Enum)(arg1)->preFilter((physx::PxFilterData const &)*arg2,(physx::PxShape const *)arg3,(physx::PxRigidActor const *)arg4,*arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxQueryFilterCallback_postFilter(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  physx::PxQueryFilterCallback *arg1 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxFilterData *arg2 = 0 ;
  physx::PxQueryHit *arg3 = 0 ;
  physx::PxQueryHitType::Enum result;
  
  arg1 = (physx::PxQueryFilterCallback *)jarg1; 
  arg2 = (physx::PxFilterData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxFilterData const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxQueryHit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryHit const & type is null", 0);
    return 0;
  } 
  result = (physx::PxQueryHitType::Enum)(arg1)->postFilter((physx::PxFilterData const &)*arg2,(physx::PxQueryHit const &)*arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxQueryFilterCallback(void * jarg1) {
  physx::PxQueryFilterCallback *arg1 = (physx::PxQueryFilterCallback *) 0 ;
  
  arg1 = (physx::PxQueryFilterCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PX_DEFAULT_CLIENT_get() {
  unsigned char jresult ;
  physx::PxClientID result;
  
  result = (physx::PxClientID)(physx::PxClientID)physx::PX_DEFAULT_CLIENT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PX_MAX_CLIENTS_get() {
  unsigned char jresult ;
  physx::PxClientID result;
  
  result = (physx::PxClientID)(physx::PxClientID)physx::PX_MAX_CLIENTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxClientBehaviorFlag() {
  void * jresult ;
  physx::PxClientBehaviorFlag *result = 0 ;
  
  result = (physx::PxClientBehaviorFlag *)new physx::PxClientBehaviorFlag();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxClientBehaviorFlag(void * jarg1) {
  physx::PxClientBehaviorFlag *arg1 = (physx::PxClientBehaviorFlag *) 0 ;
  
  arg1 = (physx::PxClientBehaviorFlag *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxActorClientBehaviorFlag() {
  void * jresult ;
  physx::PxActorClientBehaviorFlag *result = 0 ;
  
  result = (physx::PxActorClientBehaviorFlag *)new physx::PxActorClientBehaviorFlag();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxActorClientBehaviorFlag(void * jarg1) {
  physx::PxActorClientBehaviorFlag *arg1 = (physx::PxActorClientBehaviorFlag *) 0 ;
  
  arg1 = (physx::PxActorClientBehaviorFlag *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxActiveTransform_actor_set(void * jarg1, void * jarg2) {
  physx::PxActiveTransform *arg1 = (physx::PxActiveTransform *) 0 ;
  physx::PxActor *arg2 = (physx::PxActor *) 0 ;
  
  arg1 = (physx::PxActiveTransform *)jarg1; 
  arg2 = (physx::PxActor *)jarg2; 
  if (arg1) (arg1)->actor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxActiveTransform_actor_get(void * jarg1) {
  void * jresult ;
  physx::PxActiveTransform *arg1 = (physx::PxActiveTransform *) 0 ;
  physx::PxActor *result = 0 ;
  
  arg1 = (physx::PxActiveTransform *)jarg1; 
  result = (physx::PxActor *) ((arg1)->actor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxActiveTransform_userData_set(void * jarg1, void * jarg2) {
  physx::PxActiveTransform *arg1 = (physx::PxActiveTransform *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (physx::PxActiveTransform *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxActiveTransform_userData_get(void * jarg1) {
  void * jresult ;
  physx::PxActiveTransform *arg1 = (physx::PxActiveTransform *) 0 ;
  void *result = 0 ;
  
  arg1 = (physx::PxActiveTransform *)jarg1; 
  result = (void *) ((arg1)->userData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxActiveTransform_actor2World_set(void * jarg1, void * jarg2) {
  physx::PxActiveTransform *arg1 = (physx::PxActiveTransform *) 0 ;
  physx::PxTransform *arg2 = (physx::PxTransform *) 0 ;
  
  arg1 = (physx::PxActiveTransform *)jarg1; 
  arg2 = (physx::PxTransform *)jarg2; 
  if (arg1) (arg1)->actor2World = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxActiveTransform_actor2World_get(void * jarg1) {
  void * jresult ;
  physx::PxActiveTransform *arg1 = (physx::PxActiveTransform *) 0 ;
  physx::PxTransform *result = 0 ;
  
  arg1 = (physx::PxActiveTransform *)jarg1; 
  result = (physx::PxTransform *)& ((arg1)->actor2World);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxActiveTransform() {
  void * jresult ;
  physx::PxActiveTransform *result = 0 ;
  
  result = (physx::PxActiveTransform *)new physx::PxActiveTransform();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxActiveTransform(void * jarg1) {
  physx::PxActiveTransform *arg1 = (physx::PxActiveTransform *) 0 ;
  
  arg1 = (physx::PxActiveTransform *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxDominanceGroupPair(float jarg1, float jarg2) {
  void * jresult ;
  physx::PxReal arg1 ;
  physx::PxReal arg2 ;
  physx::PxDominanceGroupPair *result = 0 ;
  
  arg1 = (physx::PxReal)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  result = (physx::PxDominanceGroupPair *)new physx::PxDominanceGroupPair(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxDominanceGroupPair_dominance0_set(void * jarg1, float jarg2) {
  physx::PxDominanceGroupPair *arg1 = (physx::PxDominanceGroupPair *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxDominanceGroupPair *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->dominance0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxDominanceGroupPair_dominance0_get(void * jarg1) {
  float jresult ;
  physx::PxDominanceGroupPair *arg1 = (physx::PxDominanceGroupPair *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxDominanceGroupPair *)jarg1; 
  result = (physx::PxReal) ((arg1)->dominance0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxDominanceGroupPair_dominance1_set(void * jarg1, float jarg2) {
  physx::PxDominanceGroupPair *arg1 = (physx::PxDominanceGroupPair *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxDominanceGroupPair *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  if (arg1) (arg1)->dominance1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxDominanceGroupPair_dominance1_get(void * jarg1) {
  float jresult ;
  physx::PxDominanceGroupPair *arg1 = (physx::PxDominanceGroupPair *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxDominanceGroupPair *)jarg1; 
  result = (physx::PxReal) ((arg1)->dominance1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxDominanceGroupPair(void * jarg1) {
  physx::PxDominanceGroupPair *arg1 = (physx::PxDominanceGroupPair *) 0 ;
  
  arg1 = (physx::PxDominanceGroupPair *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxActorTypeFlag() {
  void * jresult ;
  physx::PxActorTypeFlag *result = 0 ;
  
  result = (physx::PxActorTypeFlag *)new physx::PxActorTypeFlag();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxActorTypeFlag(void * jarg1) {
  physx::PxActorTypeFlag *arg1 = (physx::PxActorTypeFlag *) 0 ;
  
  arg1 = (physx::PxActorTypeFlag *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxQueryCache__SWIG_0() {
  void * jresult ;
  physx::PxQueryCache *result = 0 ;
  
  result = (physx::PxQueryCache *)new physx::PxQueryCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PxQueryCache__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxShape *arg1 = (physx::PxShape *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxQueryCache *result = 0 ;
  
  arg1 = (physx::PxShape *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  result = (physx::PxQueryCache *)new physx::PxQueryCache(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxQueryCache_shape_set(void * jarg1, void * jarg2) {
  physx::PxQueryCache *arg1 = (physx::PxQueryCache *) 0 ;
  physx::PxShape *arg2 = (physx::PxShape *) 0 ;
  
  arg1 = (physx::PxQueryCache *)jarg1; 
  arg2 = (physx::PxShape *)jarg2; 
  if (arg1) (arg1)->shape = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxQueryCache_shape_get(void * jarg1) {
  void * jresult ;
  physx::PxQueryCache *arg1 = (physx::PxQueryCache *) 0 ;
  physx::PxShape *result = 0 ;
  
  arg1 = (physx::PxQueryCache *)jarg1; 
  result = (physx::PxShape *) ((arg1)->shape);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxQueryCache_actor_set(void * jarg1, void * jarg2) {
  physx::PxQueryCache *arg1 = (physx::PxQueryCache *) 0 ;
  physx::PxRigidActor *arg2 = (physx::PxRigidActor *) 0 ;
  
  arg1 = (physx::PxQueryCache *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2; 
  if (arg1) (arg1)->actor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxQueryCache_actor_get(void * jarg1) {
  void * jresult ;
  physx::PxQueryCache *arg1 = (physx::PxQueryCache *) 0 ;
  physx::PxRigidActor *result = 0 ;
  
  arg1 = (physx::PxQueryCache *)jarg1; 
  result = (physx::PxRigidActor *) ((arg1)->actor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxQueryCache_faceIndex_set(void * jarg1, unsigned int jarg2) {
  physx::PxQueryCache *arg1 = (physx::PxQueryCache *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxQueryCache *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  if (arg1) (arg1)->faceIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxQueryCache_faceIndex_get(void * jarg1) {
  unsigned int jresult ;
  physx::PxQueryCache *arg1 = (physx::PxQueryCache *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxQueryCache *)jarg1; 
  result = (physx::PxU32) ((arg1)->faceIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PxQueryCache(void * jarg1) {
  physx::PxQueryCache *arg1 = (physx::PxQueryCache *) 0 ;
  
  arg1 = (physx::PxQueryCache *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_release(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  (arg1)->release();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setFlag(void * jarg1, int jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSceneFlag::Enum arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxSceneFlag::Enum)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->setFlag(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getFlags(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxSceneFlag::Enum,unsigned short > > result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = ((physx::PxScene const *)arg1)->getFlags();
  jresult = new physx::PxSceneFlags((const physx::PxSceneFlags &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setLimits(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSceneLimits *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxSceneLimits *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSceneLimits const & type is null", 0);
    return ;
  } 
  (arg1)->setLimits((physx::PxSceneLimits const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getLimits(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSceneLimits result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = ((physx::PxScene const *)arg1)->getLimits();
  jresult = new physx::PxSceneLimits((const physx::PxSceneLimits &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getPhysics(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxPhysics *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxPhysics *) &(arg1)->getPhysics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getTimestamp(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getTimestamp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_addArticulation(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxArticulation *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxArticulation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulation & type is null", 0);
    return ;
  } 
  (arg1)->addArticulation(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_removeArticulation__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxArticulation *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxArticulation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulation & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->removeArticulation(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_removeArticulation__SWIG_1(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxArticulation *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxArticulation *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxArticulation & type is null", 0);
    return ;
  } 
  (arg1)->removeArticulation(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_addActor(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxActor *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return ;
  } 
  (arg1)->addActor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_addActors(void * jarg1, void * jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxActor **arg2 = (physx::PxActor **) 0 ;
  physx::PxU32 arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxActor **)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  (arg1)->addActors((physx::PxActor *const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_removeActor__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxActor *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->removeActor(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_removeActor__SWIG_1(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxActor *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return ;
  } 
  (arg1)->removeActor(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_removeActors__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxActor **arg2 = (physx::PxActor **) 0 ;
  physx::PxU32 arg3 ;
  bool arg4 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxActor **)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->removeActors((physx::PxActor *const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_removeActors__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxActor **arg2 = (physx::PxActor **) 0 ;
  physx::PxU32 arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxActor **)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  (arg1)->removeActors((physx::PxActor *const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_addAggregate(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxAggregate *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxAggregate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxAggregate & type is null", 0);
    return ;
  } 
  (arg1)->addAggregate(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_removeAggregate__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxAggregate *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxAggregate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxAggregate & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->removeAggregate(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_removeAggregate__SWIG_1(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxAggregate *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxAggregate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxAggregate & type is null", 0);
    return ;
  } 
  (arg1)->removeAggregate(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_addCollection(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxCollection *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxCollection *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxCollection const & type is null", 0);
    return ;
  } 
  (arg1)->addCollection((PxCollection const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getNbActors(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxActorTypeFlag::Enum,unsigned short > > arg2 ;
  physx::PxActorTypeFlags *argp2 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  argp2 = (physx::PxActorTypeFlags *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxActorTypeFlags", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getNbActors(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getActors__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxActorTypeFlag::Enum,unsigned short > > arg2 ;
  physx::PxActor **arg3 = (physx::PxActor **) 0 ;
  physx::PxU32 arg4 ;
  physx::PxU32 arg5 ;
  physx::PxActorTypeFlags *argp2 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  argp2 = (physx::PxActorTypeFlags *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxActorTypeFlags", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (physx::PxActor **)jarg3; 
  arg4 = (physx::PxU32)jarg4; 
  arg5 = (physx::PxU32)jarg5; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getActors(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getActors__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxActorTypeFlag::Enum,unsigned short > > arg2 ;
  physx::PxActor **arg3 = (physx::PxActor **) 0 ;
  physx::PxU32 arg4 ;
  physx::PxActorTypeFlags *argp2 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  argp2 = (physx::PxActorTypeFlags *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxActorTypeFlags", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (physx::PxActor **)jarg3; 
  arg4 = (physx::PxU32)jarg4; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getActors(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getActiveTransforms__SWIG_0(void * jarg1, void * jarg2, unsigned char jarg3) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 *arg2 = 0 ;
  physx::PxClientID arg3 ;
  physx::PxActiveTransform *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxU32 & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxClientID)jarg3; 
  result = (physx::PxActiveTransform *)(arg1)->getActiveTransforms(*arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getActiveTransforms__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 *arg2 = 0 ;
  physx::PxActiveTransform *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxU32 & type is null", 0);
    return 0;
  } 
  result = (physx::PxActiveTransform *)(arg1)->getActiveTransforms(*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getNbArticulations(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getNbArticulations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getArticulations__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxArticulation **arg2 = (physx::PxArticulation **) 0 ;
  physx::PxU32 arg3 ;
  physx::PxU32 arg4 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxArticulation **)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  arg4 = (physx::PxU32)jarg4; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getArticulations(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getArticulations__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxArticulation **arg2 = (physx::PxArticulation **) 0 ;
  physx::PxU32 arg3 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxArticulation **)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getArticulations(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getNbConstraints(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getNbConstraints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getConstraints__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxConstraint **arg2 = (physx::PxConstraint **) 0 ;
  physx::PxU32 arg3 ;
  physx::PxU32 arg4 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxConstraint **)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  arg4 = (physx::PxU32)jarg4; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getConstraints(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getConstraints__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxConstraint **arg2 = (physx::PxConstraint **) 0 ;
  physx::PxU32 arg3 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxConstraint **)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getConstraints(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getNbAggregates(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getNbAggregates();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getAggregates__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxAggregate **arg2 = (physx::PxAggregate **) 0 ;
  physx::PxU32 arg3 ;
  physx::PxU32 arg4 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxAggregate **)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  arg4 = (physx::PxU32)jarg4; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getAggregates(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getAggregates__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxAggregate **arg2 = (physx::PxAggregate **) 0 ;
  physx::PxU32 arg3 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxAggregate **)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getAggregates(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setDominanceGroupPair(void * jarg1, unsigned char jarg2, unsigned char jarg3, void * jarg4) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxDominanceGroup arg2 ;
  physx::PxDominanceGroup arg3 ;
  physx::PxDominanceGroupPair *arg4 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxDominanceGroup)jarg2; 
  arg3 = (physx::PxDominanceGroup)jarg3; 
  arg4 = (physx::PxDominanceGroupPair *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxDominanceGroupPair const & type is null", 0);
    return ;
  } 
  (arg1)->setDominanceGroupPair(arg2,arg3,(physx::PxDominanceGroupPair const &)*arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getDominanceGroupPair(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxDominanceGroup arg2 ;
  physx::PxDominanceGroup arg3 ;
  SwigValueWrapper< physx::PxDominanceGroupPair > result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxDominanceGroup)jarg2; 
  arg3 = (physx::PxDominanceGroup)jarg3; 
  result = ((physx::PxScene const *)arg1)->getDominanceGroupPair(arg2,arg3);
  jresult = new physx::PxDominanceGroupPair((const physx::PxDominanceGroupPair &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getCpuDispatcher(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxCpuDispatcher *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxCpuDispatcher *)((physx::PxScene const *)arg1)->getCpuDispatcher();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getGpuDispatcher(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxGpuDispatcher *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxGpuDispatcher *)((physx::PxScene const *)arg1)->getGpuDispatcher();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getSpuDispatcher(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSpuDispatcher *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxSpuDispatcher *)((physx::PxScene const *)arg1)->getSpuDispatcher();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PxScene_createClient(void * jarg1) {
  unsigned char jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxClientID result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxClientID)(arg1)->createClient();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setClientBehaviorFlags(void * jarg1, unsigned char jarg2, void * jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxClientID arg2 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxClientBehaviorFlag::Enum,unsigned char > > arg3 ;
  physx::PxClientBehaviorFlags *argp3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxClientID)jarg2; 
  argp3 = (physx::PxClientBehaviorFlags *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxClientBehaviorFlags", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setClientBehaviorFlags(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getClientBehaviorFlags(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxClientID arg2 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxClientBehaviorFlag::Enum,unsigned char > > result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxClientID)jarg2; 
  result = ((physx::PxScene const *)arg1)->getClientBehaviorFlags(arg2);
  jresult = new physx::PxClientBehaviorFlags((const physx::PxClientBehaviorFlags &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setClothInterCollisionDistance(void * jarg1, float jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxF32 arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxF32)jarg2; 
  (arg1)->setClothInterCollisionDistance(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxScene_getClothInterCollisionDistance(void * jarg1) {
  float jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxF32)((physx::PxScene const *)arg1)->getClothInterCollisionDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setClothInterCollisionStiffness(void * jarg1, float jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxF32 arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxF32)jarg2; 
  (arg1)->setClothInterCollisionStiffness(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxScene_getClothInterCollisionStiffness(void * jarg1) {
  float jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxF32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxF32)((physx::PxScene const *)arg1)->getClothInterCollisionStiffness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setClothInterCollisionNbIterations(void * jarg1, unsigned int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  (arg1)->setClothInterCollisionNbIterations(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getClothInterCollisionNbIterations(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getClothInterCollisionNbIterations();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setSimulationEventCallback__SWIG_0(void * jarg1, void * jarg2, unsigned char jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSimulationEventCallback *arg2 = (physx::PxSimulationEventCallback *) 0 ;
  physx::PxClientID arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxSimulationEventCallback *)jarg2; 
  arg3 = (physx::PxClientID)jarg3; 
  (arg1)->setSimulationEventCallback(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setSimulationEventCallback__SWIG_1(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSimulationEventCallback *arg2 = (physx::PxSimulationEventCallback *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxSimulationEventCallback *)jarg2; 
  (arg1)->setSimulationEventCallback(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getSimulationEventCallback__SWIG_0(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxClientID arg2 ;
  physx::PxSimulationEventCallback *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxClientID)jarg2; 
  result = (physx::PxSimulationEventCallback *)((physx::PxScene const *)arg1)->getSimulationEventCallback(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getSimulationEventCallback__SWIG_1(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSimulationEventCallback *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxSimulationEventCallback *)((physx::PxScene const *)arg1)->getSimulationEventCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setContactModifyCallback(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxContactModifyCallback *arg2 = (physx::PxContactModifyCallback *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxContactModifyCallback *)jarg2; 
  (arg1)->setContactModifyCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setCCDContactModifyCallback(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxCCDContactModifyCallback *arg2 = (physx::PxCCDContactModifyCallback *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxCCDContactModifyCallback *)jarg2; 
  (arg1)->setCCDContactModifyCallback(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getContactModifyCallback(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxContactModifyCallback *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxContactModifyCallback *)((physx::PxScene const *)arg1)->getContactModifyCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getCCDContactModifyCallback(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxCCDContactModifyCallback *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxCCDContactModifyCallback *)((physx::PxScene const *)arg1)->getCCDContactModifyCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setBroadPhaseCallback__SWIG_0(void * jarg1, void * jarg2, unsigned char jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBroadPhaseCallback *arg2 = (physx::PxBroadPhaseCallback *) 0 ;
  physx::PxClientID arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxBroadPhaseCallback *)jarg2; 
  arg3 = (physx::PxClientID)jarg3; 
  (arg1)->setBroadPhaseCallback(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setBroadPhaseCallback__SWIG_1(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBroadPhaseCallback *arg2 = (physx::PxBroadPhaseCallback *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxBroadPhaseCallback *)jarg2; 
  (arg1)->setBroadPhaseCallback(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getBroadPhaseCallback__SWIG_0(void * jarg1, unsigned char jarg2) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxClientID arg2 ;
  physx::PxBroadPhaseCallback *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxClientID)jarg2; 
  result = (physx::PxBroadPhaseCallback *)((physx::PxScene const *)arg1)->getBroadPhaseCallback(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getBroadPhaseCallback__SWIG_1(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBroadPhaseCallback *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxBroadPhaseCallback *)((physx::PxScene const *)arg1)->getBroadPhaseCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getFilterShaderData(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  void *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (void *)((physx::PxScene const *)arg1)->getFilterShaderData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getFilterShaderDataSize(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getFilterShaderDataSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getFilterShader(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSimulationFilterShader result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxSimulationFilterShader)((physx::PxScene const *)arg1)->getFilterShader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getFilterCallback(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSimulationFilterCallback *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxSimulationFilterCallback *)((physx::PxScene const *)arg1)->getFilterCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_resetFiltering__SWIG_0(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxActor *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxActor & type is null", 0);
    return ;
  } 
  (arg1)->resetFiltering(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_resetFiltering__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxRigidActor *arg2 = 0 ;
  physx::PxShape **arg3 = (physx::PxShape **) 0 ;
  physx::PxU32 arg4 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxRigidActor *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRigidActor & type is null", 0);
    return ;
  } 
  arg3 = (physx::PxShape **)jarg3; 
  arg4 = (physx::PxU32)jarg4; 
  (arg1)->resetFiltering(*arg2,(physx::PxShape *const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_simulate__SWIG_0(void * jarg1, float jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  physx::PxBaseTask *arg3 = (physx::PxBaseTask *) 0 ;
  void *arg4 = (void *) 0 ;
  physx::PxU32 arg5 ;
  bool arg6 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxBaseTask *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (physx::PxU32)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->simulate(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_simulate__SWIG_1(void * jarg1, float jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  physx::PxBaseTask *arg3 = (physx::PxBaseTask *) 0 ;
  void *arg4 = (void *) 0 ;
  physx::PxU32 arg5 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxBaseTask *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (physx::PxU32)jarg5; 
  (arg1)->simulate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_simulate__SWIG_2(void * jarg1, float jarg2, void * jarg3, void * jarg4) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  physx::PxBaseTask *arg3 = (physx::PxBaseTask *) 0 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxBaseTask *)jarg3; 
  arg4 = (void *)jarg4; 
  (arg1)->simulate(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_simulate__SWIG_3(void * jarg1, float jarg2, void * jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  physx::PxBaseTask *arg3 = (physx::PxBaseTask *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxBaseTask *)jarg3; 
  (arg1)->simulate(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_simulate__SWIG_4(void * jarg1, float jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  (arg1)->simulate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_solve__SWIG_0(void * jarg1, float jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  physx::PxBaseTask *arg3 = (physx::PxBaseTask *) 0 ;
  void *arg4 = (void *) 0 ;
  physx::PxU32 arg5 ;
  bool arg6 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxBaseTask *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (physx::PxU32)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->solve(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_solve__SWIG_1(void * jarg1, float jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  physx::PxBaseTask *arg3 = (physx::PxBaseTask *) 0 ;
  void *arg4 = (void *) 0 ;
  physx::PxU32 arg5 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxBaseTask *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (physx::PxU32)jarg5; 
  (arg1)->solve(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_solve__SWIG_2(void * jarg1, float jarg2, void * jarg3, void * jarg4) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  physx::PxBaseTask *arg3 = (physx::PxBaseTask *) 0 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxBaseTask *)jarg3; 
  arg4 = (void *)jarg4; 
  (arg1)->solve(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_solve__SWIG_3(void * jarg1, float jarg2, void * jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  physx::PxBaseTask *arg3 = (physx::PxBaseTask *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxBaseTask *)jarg3; 
  (arg1)->solve(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_solve__SWIG_4(void * jarg1, float jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  (arg1)->solve(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_collide__SWIG_0(void * jarg1, float jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  physx::PxBaseTask *arg3 = (physx::PxBaseTask *) 0 ;
  void *arg4 = (void *) 0 ;
  physx::PxU32 arg5 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxBaseTask *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (physx::PxU32)jarg5; 
  (arg1)->collide(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_collide__SWIG_1(void * jarg1, float jarg2, void * jarg3, void * jarg4) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  physx::PxBaseTask *arg3 = (physx::PxBaseTask *) 0 ;
  void *arg4 = (void *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxBaseTask *)jarg3; 
  arg4 = (void *)jarg4; 
  (arg1)->collide(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_collide__SWIG_2(void * jarg1, float jarg2, void * jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  physx::PxBaseTask *arg3 = (physx::PxBaseTask *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  arg3 = (physx::PxBaseTask *)jarg3; 
  (arg1)->collide(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_collide__SWIG_3(void * jarg1, float jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  (arg1)->collide(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_checkResults__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->checkResults(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_checkResults__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (bool)(arg1)->checkResults();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_fetchResults__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool arg2 ;
  physx::PxU32 *arg3 = (physx::PxU32 *) 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (physx::PxU32 *)jarg3; 
  result = (bool)(arg1)->fetchResults(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_fetchResults__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->fetchResults(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_fetchResults__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (bool)(arg1)->fetchResults();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_flush__SWIG_0(void * jarg1, unsigned int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->flush(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_flush__SWIG_1(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  (arg1)->flush();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_flushSimulation__SWIG_0(void * jarg1, unsigned int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->flushSimulation(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_flushSimulation__SWIG_1(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  (arg1)->flushSimulation();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setGravity(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->setGravity((physx::PxVec3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getGravity(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = ((physx::PxScene const *)arg1)->getGravity();
  jresult = new physx::PxVec3((const physx::PxVec3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setBounceThresholdVelocity(void * jarg1, float jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxReal)jarg2; 
  (arg1)->setBounceThresholdVelocity(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxScene_getBounceThresholdVelocity(void * jarg1) {
  float jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxReal)((physx::PxScene const *)arg1)->getBounceThresholdVelocity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setCCDMaxPasses(void * jarg1, unsigned int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  (arg1)->setCCDMaxPasses(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getCCDMaxPasses(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getCCDMaxPasses();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxScene_getContactCorrelationDistance(void * jarg1) {
  float jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxReal)((physx::PxScene const *)arg1)->getContactCorrelationDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxScene_getFrictionOffsetThreshold(void * jarg1) {
  float jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxReal)((physx::PxScene const *)arg1)->getFrictionOffsetThreshold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxScene_getMeshContactMargin(void * jarg1) {
  float jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxReal)((physx::PxScene const *)arg1)->getMeshContactMargin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setFrictionType(void * jarg1, int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxFrictionType::Enum arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxFrictionType::Enum)jarg2; 
  (arg1)->setFrictionType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_getFrictionType(void * jarg1) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxFrictionType::Enum result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxFrictionType::Enum)((physx::PxScene const *)arg1)->getFrictionType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_setVisualizationParameter(void * jarg1, int jarg2, float jarg3) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVisualizationParameter::Enum arg2 ;
  physx::PxReal arg3 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVisualizationParameter::Enum)jarg2; 
  arg3 = (physx::PxReal)jarg3; 
  result = (bool)(arg1)->setVisualizationParameter(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxScene_getVisualizationParameter(void * jarg1, int jarg2) {
  float jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVisualizationParameter::Enum arg2 ;
  physx::PxReal result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVisualizationParameter::Enum)jarg2; 
  result = (physx::PxReal)((physx::PxScene const *)arg1)->getVisualizationParameter(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setVisualizationCullingBox(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBounds3 *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxBounds3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBounds3 const & type is null", 0);
    return ;
  } 
  (arg1)->setVisualizationCullingBox((physx::PxBounds3 const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getVisualizationCullingBox(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBounds3 *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxBounds3 *) &((physx::PxScene const *)arg1)->getVisualizationCullingBox();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getRenderBuffer(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxRenderBuffer *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxRenderBuffer *) &(arg1)->getRenderBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_getSimulationStatistics(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxSimulationStatistics *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxSimulationStatistics *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSimulationStatistics & type is null", 0);
    return ;
  } 
  ((physx::PxScene const *)arg1)->getSimulationStatistics(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_getStaticStructure(void * jarg1) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxPruningStructure::Enum result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxPruningStructure::Enum)((physx::PxScene const *)arg1)->getStaticStructure();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_getDynamicStructure(void * jarg1) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxPruningStructure::Enum result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxPruningStructure::Enum)((physx::PxScene const *)arg1)->getDynamicStructure();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_flushQueryUpdates(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  (arg1)->flushQueryUpdates();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_createBatchQuery(void * jarg1, void * jarg2) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBatchQueryDesc *arg2 = 0 ;
  physx::PxBatchQuery *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxBatchQueryDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBatchQueryDesc const & type is null", 0);
    return 0;
  } 
  result = (physx::PxBatchQuery *)(arg1)->createBatchQuery((physx::PxBatchQueryDesc const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_createVolumeCache__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxU32 arg3 ;
  physx::PxVolumeCache *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  result = (physx::PxVolumeCache *)(arg1)->createVolumeCache(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_createVolumeCache__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  physx::PxVolumeCache *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  result = (physx::PxVolumeCache *)(arg1)->createVolumeCache(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_createVolumeCache__SWIG_2(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVolumeCache *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxVolumeCache *)(arg1)->createVolumeCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setDynamicTreeRebuildRateHint(void * jarg1, unsigned int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  (arg1)->setDynamicTreeRebuildRateHint(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getDynamicTreeRebuildRateHint(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getDynamicTreeRebuildRateHint();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_forceDynamicTreeRebuild(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->forceDynamicTreeRebuild(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_raycast__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxRaycastCallback *arg5 = 0 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxQueryFilterData *arg7 = 0 ;
  physx::PxQueryFilterCallback *arg8 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg9 = (physx::PxQueryCache *) 0 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxRaycastCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRaycastCallback & type is null", 0);
    return 0;
  } 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxQueryFilterData *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryFilterCallback *)jarg8; 
  arg9 = (physx::PxQueryCache *)jarg9; 
  result = (bool)((physx::PxScene const *)arg1)->raycast((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,*arg5,arg6,(physx::PxQueryFilterData const &)*arg7,arg8,(physx::PxQueryCache const *)arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_raycast__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxRaycastCallback *arg5 = 0 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxQueryFilterData *arg7 = 0 ;
  physx::PxQueryFilterCallback *arg8 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxRaycastCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRaycastCallback & type is null", 0);
    return 0;
  } 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxQueryFilterData *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryFilterCallback *)jarg8; 
  result = (bool)((physx::PxScene const *)arg1)->raycast((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,*arg5,arg6,(physx::PxQueryFilterData const &)*arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_raycast__SWIG_2(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxRaycastCallback *arg5 = 0 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxQueryFilterData *arg7 = 0 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxRaycastCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRaycastCallback & type is null", 0);
    return 0;
  } 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxQueryFilterData *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  result = (bool)((physx::PxScene const *)arg1)->raycast((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,*arg5,arg6,(physx::PxQueryFilterData const &)*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_raycast__SWIG_3(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxRaycastCallback *arg5 = 0 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxRaycastCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRaycastCallback & type is null", 0);
    return 0;
  } 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  result = (bool)((physx::PxScene const *)arg1)->raycast((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_raycast__SWIG_4(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxRaycastCallback *arg5 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxRaycastCallback *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRaycastCallback & type is null", 0);
    return 0;
  } 
  result = (bool)((physx::PxScene const *)arg1)->raycast((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweep__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, float jarg11) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  physx::PxSweepCallback *arg6 = 0 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg7 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxQueryFilterCallback *arg9 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg10 = (physx::PxQueryCache *) 0 ;
  physx::PxReal arg11 ;
  physx::PxHitFlags *argp7 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  arg6 = (physx::PxSweepCallback *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepCallback & type is null", 0);
    return 0;
  } 
  argp7 = (physx::PxHitFlags *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryFilterCallback *)jarg9; 
  arg10 = (physx::PxQueryCache *)jarg10; 
  arg11 = (physx::PxReal)jarg11; 
  result = (bool)((physx::PxScene const *)arg1)->sweep((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,*arg6,arg7,(physx::PxQueryFilterData const &)*arg8,arg9,(physx::PxQueryCache const *)arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweep__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  physx::PxSweepCallback *arg6 = 0 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg7 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxQueryFilterCallback *arg9 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg10 = (physx::PxQueryCache *) 0 ;
  physx::PxHitFlags *argp7 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  arg6 = (physx::PxSweepCallback *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepCallback & type is null", 0);
    return 0;
  } 
  argp7 = (physx::PxHitFlags *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryFilterCallback *)jarg9; 
  arg10 = (physx::PxQueryCache *)jarg10; 
  result = (bool)((physx::PxScene const *)arg1)->sweep((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,*arg6,arg7,(physx::PxQueryFilterData const &)*arg8,arg9,(physx::PxQueryCache const *)arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweep__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  physx::PxSweepCallback *arg6 = 0 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg7 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxQueryFilterCallback *arg9 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxHitFlags *argp7 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  arg6 = (physx::PxSweepCallback *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepCallback & type is null", 0);
    return 0;
  } 
  argp7 = (physx::PxHitFlags *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryFilterCallback *)jarg9; 
  result = (bool)((physx::PxScene const *)arg1)->sweep((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,*arg6,arg7,(physx::PxQueryFilterData const &)*arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweep__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  physx::PxSweepCallback *arg6 = 0 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg7 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxHitFlags *argp7 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  arg6 = (physx::PxSweepCallback *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepCallback & type is null", 0);
    return 0;
  } 
  argp7 = (physx::PxHitFlags *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg7 = *argp7; 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  result = (bool)((physx::PxScene const *)arg1)->sweep((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,*arg6,arg7,(physx::PxQueryFilterData const &)*arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweep__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  physx::PxSweepCallback *arg6 = 0 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg7 ;
  physx::PxHitFlags *argp7 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  arg6 = (physx::PxSweepCallback *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepCallback & type is null", 0);
    return 0;
  } 
  argp7 = (physx::PxHitFlags *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg7 = *argp7; 
  result = (bool)((physx::PxScene const *)arg1)->sweep((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,*arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweep__SWIG_5(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  physx::PxSweepCallback *arg6 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  arg6 = (physx::PxSweepCallback *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepCallback & type is null", 0);
    return 0;
  } 
  result = (bool)((physx::PxScene const *)arg1)->sweep((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_overlap__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxOverlapCallback *arg4 = 0 ;
  physx::PxQueryFilterData *arg5 = 0 ;
  physx::PxQueryFilterCallback *arg6 = (physx::PxQueryFilterCallback *) 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxOverlapCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxOverlapCallback & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxQueryFilterData *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg6 = (physx::PxQueryFilterCallback *)jarg6; 
  result = (bool)((physx::PxScene const *)arg1)->overlap((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,*arg4,(physx::PxQueryFilterData const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_overlap__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxOverlapCallback *arg4 = 0 ;
  physx::PxQueryFilterData *arg5 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxOverlapCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxOverlapCallback & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxQueryFilterData *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  result = (bool)((physx::PxScene const *)arg1)->overlap((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,*arg4,(physx::PxQueryFilterData const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_overlap__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxOverlapCallback *arg4 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxOverlapCallback *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxOverlapCallback & type is null", 0);
    return 0;
  } 
  result = (bool)((physx::PxScene const *)arg1)->overlap((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_raycastAny__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, unsigned char jarg9) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxQueryHit *arg5 = 0 ;
  physx::PxQueryFilterData *arg6 = 0 ;
  physx::PxQueryFilterCallback *arg7 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg8 = (physx::PxQueryCache *) 0 ;
  physx::PxClientID arg9 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxQueryHit *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryHit & type is null", 0);
    return 0;
  } 
  arg6 = (physx::PxQueryFilterData *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg7 = (physx::PxQueryFilterCallback *)jarg7; 
  arg8 = (physx::PxQueryCache *)jarg8; 
  arg9 = (physx::PxClientID)jarg9; 
  result = (bool)((physx::PxScene const *)arg1)->raycastAny((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,*arg5,(physx::PxQueryFilterData const &)*arg6,arg7,(physx::PxQueryCache const *)arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_raycastAny__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxQueryHit *arg5 = 0 ;
  physx::PxQueryFilterData *arg6 = 0 ;
  physx::PxQueryFilterCallback *arg7 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg8 = (physx::PxQueryCache *) 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxQueryHit *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryHit & type is null", 0);
    return 0;
  } 
  arg6 = (physx::PxQueryFilterData *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg7 = (physx::PxQueryFilterCallback *)jarg7; 
  arg8 = (physx::PxQueryCache *)jarg8; 
  result = (bool)((physx::PxScene const *)arg1)->raycastAny((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,*arg5,(physx::PxQueryFilterData const &)*arg6,arg7,(physx::PxQueryCache const *)arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_raycastAny__SWIG_2(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxQueryHit *arg5 = 0 ;
  physx::PxQueryFilterData *arg6 = 0 ;
  physx::PxQueryFilterCallback *arg7 = (physx::PxQueryFilterCallback *) 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxQueryHit *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryHit & type is null", 0);
    return 0;
  } 
  arg6 = (physx::PxQueryFilterData *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg7 = (physx::PxQueryFilterCallback *)jarg7; 
  result = (bool)((physx::PxScene const *)arg1)->raycastAny((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,*arg5,(physx::PxQueryFilterData const &)*arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_raycastAny__SWIG_3(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxQueryHit *arg5 = 0 ;
  physx::PxQueryFilterData *arg6 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxQueryHit *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryHit & type is null", 0);
    return 0;
  } 
  arg6 = (physx::PxQueryFilterData *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  result = (bool)((physx::PxScene const *)arg1)->raycastAny((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,*arg5,(physx::PxQueryFilterData const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_raycastAny__SWIG_4(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  physx::PxQueryHit *arg5 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  arg5 = (physx::PxQueryHit *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryHit & type is null", 0);
    return 0;
  } 
  result = (bool)((physx::PxScene const *)arg1)->raycastAny((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_raycastSingle__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, unsigned char jarg10) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg5 ;
  physx::PxRaycastHit *arg6 = 0 ;
  physx::PxQueryFilterData *arg7 = 0 ;
  physx::PxQueryFilterCallback *arg8 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg9 = (physx::PxQueryCache *) 0 ;
  physx::PxClientID arg10 ;
  physx::PxHitFlags *argp5 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  argp5 = (physx::PxHitFlags *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (physx::PxRaycastHit *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRaycastHit & type is null", 0);
    return 0;
  } 
  arg7 = (physx::PxQueryFilterData *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryFilterCallback *)jarg8; 
  arg9 = (physx::PxQueryCache *)jarg9; 
  arg10 = (physx::PxClientID)jarg10; 
  result = (bool)(arg1)->raycastSingle((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5,*arg6,(physx::PxQueryFilterData const &)*arg7,arg8,(physx::PxQueryCache const *)arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_raycastSingle__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg5 ;
  physx::PxRaycastHit *arg6 = 0 ;
  physx::PxQueryFilterData *arg7 = 0 ;
  physx::PxQueryFilterCallback *arg8 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg9 = (physx::PxQueryCache *) 0 ;
  physx::PxHitFlags *argp5 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  argp5 = (physx::PxHitFlags *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (physx::PxRaycastHit *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRaycastHit & type is null", 0);
    return 0;
  } 
  arg7 = (physx::PxQueryFilterData *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryFilterCallback *)jarg8; 
  arg9 = (physx::PxQueryCache *)jarg9; 
  result = (bool)(arg1)->raycastSingle((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5,*arg6,(physx::PxQueryFilterData const &)*arg7,arg8,(physx::PxQueryCache const *)arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_raycastSingle__SWIG_2(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg5 ;
  physx::PxRaycastHit *arg6 = 0 ;
  physx::PxQueryFilterData *arg7 = 0 ;
  physx::PxQueryFilterCallback *arg8 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxHitFlags *argp5 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  argp5 = (physx::PxHitFlags *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (physx::PxRaycastHit *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRaycastHit & type is null", 0);
    return 0;
  } 
  arg7 = (physx::PxQueryFilterData *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryFilterCallback *)jarg8; 
  result = (bool)(arg1)->raycastSingle((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5,*arg6,(physx::PxQueryFilterData const &)*arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_raycastSingle__SWIG_3(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg5 ;
  physx::PxRaycastHit *arg6 = 0 ;
  physx::PxQueryFilterData *arg7 = 0 ;
  physx::PxHitFlags *argp5 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  argp5 = (physx::PxHitFlags *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (physx::PxRaycastHit *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRaycastHit & type is null", 0);
    return 0;
  } 
  arg7 = (physx::PxQueryFilterData *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->raycastSingle((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5,*arg6,(physx::PxQueryFilterData const &)*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_raycastSingle__SWIG_4(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg5 ;
  physx::PxRaycastHit *arg6 = 0 ;
  physx::PxHitFlags *argp5 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  argp5 = (physx::PxHitFlags *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (physx::PxRaycastHit *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxRaycastHit & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->raycastSingle((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5,*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_raycastMultiple__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, unsigned int jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11, unsigned char jarg12) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg5 ;
  physx::PxRaycastHit *arg6 = (physx::PxRaycastHit *) 0 ;
  physx::PxU32 arg7 ;
  bool *arg8 = 0 ;
  physx::PxQueryFilterData *arg9 = 0 ;
  physx::PxQueryFilterCallback *arg10 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg11 = (physx::PxQueryCache *) 0 ;
  physx::PxClientID arg12 ;
  physx::PxHitFlags *argp5 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  argp5 = (physx::PxHitFlags *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (physx::PxRaycastHit *)jarg6; 
  arg7 = (physx::PxU32)jarg7; 
  arg8 = (bool *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryFilterData *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg10 = (physx::PxQueryFilterCallback *)jarg10; 
  arg11 = (physx::PxQueryCache *)jarg11; 
  arg12 = (physx::PxClientID)jarg12; 
  result = (physx::PxI32)(arg1)->raycastMultiple((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5,arg6,arg7,*arg8,(physx::PxQueryFilterData const &)*arg9,arg10,(physx::PxQueryCache const *)arg11,arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_raycastMultiple__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, unsigned int jarg7, void * jarg8, void * jarg9, void * jarg10, void * jarg11) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg5 ;
  physx::PxRaycastHit *arg6 = (physx::PxRaycastHit *) 0 ;
  physx::PxU32 arg7 ;
  bool *arg8 = 0 ;
  physx::PxQueryFilterData *arg9 = 0 ;
  physx::PxQueryFilterCallback *arg10 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg11 = (physx::PxQueryCache *) 0 ;
  physx::PxHitFlags *argp5 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  argp5 = (physx::PxHitFlags *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (physx::PxRaycastHit *)jarg6; 
  arg7 = (physx::PxU32)jarg7; 
  arg8 = (bool *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryFilterData *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg10 = (physx::PxQueryFilterCallback *)jarg10; 
  arg11 = (physx::PxQueryCache *)jarg11; 
  result = (physx::PxI32)(arg1)->raycastMultiple((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5,arg6,arg7,*arg8,(physx::PxQueryFilterData const &)*arg9,arg10,(physx::PxQueryCache const *)arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_raycastMultiple__SWIG_2(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, unsigned int jarg7, void * jarg8, void * jarg9, void * jarg10) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg5 ;
  physx::PxRaycastHit *arg6 = (physx::PxRaycastHit *) 0 ;
  physx::PxU32 arg7 ;
  bool *arg8 = 0 ;
  physx::PxQueryFilterData *arg9 = 0 ;
  physx::PxQueryFilterCallback *arg10 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxHitFlags *argp5 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  argp5 = (physx::PxHitFlags *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (physx::PxRaycastHit *)jarg6; 
  arg7 = (physx::PxU32)jarg7; 
  arg8 = (bool *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryFilterData *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg10 = (physx::PxQueryFilterCallback *)jarg10; 
  result = (physx::PxI32)(arg1)->raycastMultiple((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5,arg6,arg7,*arg8,(physx::PxQueryFilterData const &)*arg9,arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_raycastMultiple__SWIG_3(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, unsigned int jarg7, void * jarg8, void * jarg9) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg5 ;
  physx::PxRaycastHit *arg6 = (physx::PxRaycastHit *) 0 ;
  physx::PxU32 arg7 ;
  bool *arg8 = 0 ;
  physx::PxQueryFilterData *arg9 = 0 ;
  physx::PxHitFlags *argp5 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  argp5 = (physx::PxHitFlags *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (physx::PxRaycastHit *)jarg6; 
  arg7 = (physx::PxU32)jarg7; 
  arg8 = (bool *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryFilterData *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  result = (physx::PxI32)(arg1)->raycastMultiple((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5,arg6,arg7,*arg8,(physx::PxQueryFilterData const &)*arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_raycastMultiple__SWIG_4(void * jarg1, void * jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, unsigned int jarg7, void * jarg8) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  physx::PxVec3 *arg3 = 0 ;
  physx::PxReal arg4 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg5 ;
  physx::PxRaycastHit *arg6 = (physx::PxRaycastHit *) 0 ;
  physx::PxU32 arg7 ;
  bool *arg8 = 0 ;
  physx::PxHitFlags *argp5 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxVec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxReal)jarg4; 
  argp5 = (physx::PxHitFlags *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg5 = *argp5; 
  arg6 = (physx::PxRaycastHit *)jarg6; 
  arg7 = (physx::PxU32)jarg7; 
  arg8 = (bool *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return 0;
  } 
  result = (physx::PxI32)(arg1)->raycastMultiple((physx::PxVec3 const &)*arg2,(physx::PxVec3 const &)*arg3,arg4,arg5,arg6,arg7,*arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweepAny__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, unsigned char jarg11, float jarg12) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxQueryHit *arg7 = 0 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxQueryFilterCallback *arg9 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg10 = (physx::PxQueryCache *) 0 ;
  physx::PxClientID arg11 ;
  physx::PxReal arg12 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxQueryHit *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryHit & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryFilterCallback *)jarg9; 
  arg10 = (physx::PxQueryCache *)jarg10; 
  arg11 = (physx::PxClientID)jarg11; 
  arg12 = (physx::PxReal)jarg12; 
  result = (bool)(arg1)->sweepAny((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,*arg7,(physx::PxQueryFilterData const &)*arg8,arg9,(physx::PxQueryCache const *)arg10,arg11,arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweepAny__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, unsigned char jarg11) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxQueryHit *arg7 = 0 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxQueryFilterCallback *arg9 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg10 = (physx::PxQueryCache *) 0 ;
  physx::PxClientID arg11 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxQueryHit *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryHit & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryFilterCallback *)jarg9; 
  arg10 = (physx::PxQueryCache *)jarg10; 
  arg11 = (physx::PxClientID)jarg11; 
  result = (bool)(arg1)->sweepAny((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,*arg7,(physx::PxQueryFilterData const &)*arg8,arg9,(physx::PxQueryCache const *)arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweepAny__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxQueryHit *arg7 = 0 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxQueryFilterCallback *arg9 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg10 = (physx::PxQueryCache *) 0 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxQueryHit *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryHit & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryFilterCallback *)jarg9; 
  arg10 = (physx::PxQueryCache *)jarg10; 
  result = (bool)(arg1)->sweepAny((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,*arg7,(physx::PxQueryFilterData const &)*arg8,arg9,(physx::PxQueryCache const *)arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweepAny__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxQueryHit *arg7 = 0 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxQueryFilterCallback *arg9 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxQueryHit *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryHit & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryFilterCallback *)jarg9; 
  result = (bool)(arg1)->sweepAny((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,*arg7,(physx::PxQueryFilterData const &)*arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweepAny__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxQueryHit *arg7 = 0 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxQueryHit *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryHit & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->sweepAny((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,*arg7,(physx::PxQueryFilterData const &)*arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweepAny__SWIG_5(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxQueryHit *arg7 = 0 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxQueryHit *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryHit & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->sweepAny((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweepSingle__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, unsigned char jarg11, float jarg12) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxSweepHit *arg7 = 0 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxQueryFilterCallback *arg9 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg10 = (physx::PxQueryCache *) 0 ;
  physx::PxClientID arg11 ;
  physx::PxReal arg12 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxSweepHit *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepHit & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryFilterCallback *)jarg9; 
  arg10 = (physx::PxQueryCache *)jarg10; 
  arg11 = (physx::PxClientID)jarg11; 
  arg12 = (physx::PxReal)jarg12; 
  result = (bool)(arg1)->sweepSingle((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,*arg7,(physx::PxQueryFilterData const &)*arg8,arg9,(physx::PxQueryCache const *)arg10,arg11,arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweepSingle__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, unsigned char jarg11) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxSweepHit *arg7 = 0 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxQueryFilterCallback *arg9 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg10 = (physx::PxQueryCache *) 0 ;
  physx::PxClientID arg11 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxSweepHit *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepHit & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryFilterCallback *)jarg9; 
  arg10 = (physx::PxQueryCache *)jarg10; 
  arg11 = (physx::PxClientID)jarg11; 
  result = (bool)(arg1)->sweepSingle((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,*arg7,(physx::PxQueryFilterData const &)*arg8,arg9,(physx::PxQueryCache const *)arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweepSingle__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxSweepHit *arg7 = 0 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxQueryFilterCallback *arg9 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg10 = (physx::PxQueryCache *) 0 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxSweepHit *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepHit & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryFilterCallback *)jarg9; 
  arg10 = (physx::PxQueryCache *)jarg10; 
  result = (bool)(arg1)->sweepSingle((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,*arg7,(physx::PxQueryFilterData const &)*arg8,arg9,(physx::PxQueryCache const *)arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweepSingle__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxSweepHit *arg7 = 0 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxQueryFilterCallback *arg9 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxSweepHit *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepHit & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg9 = (physx::PxQueryFilterCallback *)jarg9; 
  result = (bool)(arg1)->sweepSingle((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,*arg7,(physx::PxQueryFilterData const &)*arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweepSingle__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, void * jarg8) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxSweepHit *arg7 = 0 ;
  physx::PxQueryFilterData *arg8 = 0 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxSweepHit *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepHit & type is null", 0);
    return 0;
  } 
  arg8 = (physx::PxQueryFilterData *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->sweepSingle((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,*arg7,(physx::PxQueryFilterData const &)*arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_sweepSingle__SWIG_5(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxSweepHit *arg7 = 0 ;
  physx::PxHitFlags *argp6 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxSweepHit *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxSweepHit & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->sweepSingle((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_sweepMultiple__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, unsigned int jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, unsigned char jarg13, float jarg14) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxSweepHit *arg7 = (physx::PxSweepHit *) 0 ;
  physx::PxU32 arg8 ;
  bool *arg9 = 0 ;
  physx::PxQueryFilterData *arg10 = 0 ;
  physx::PxQueryFilterCallback *arg11 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg12 = (physx::PxQueryCache *) 0 ;
  physx::PxClientID arg13 ;
  physx::PxReal arg14 ;
  physx::PxHitFlags *argp6 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxSweepHit *)jarg7; 
  arg8 = (physx::PxU32)jarg8; 
  arg9 = (bool *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return 0;
  } 
  arg10 = (physx::PxQueryFilterData *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg11 = (physx::PxQueryFilterCallback *)jarg11; 
  arg12 = (physx::PxQueryCache *)jarg12; 
  arg13 = (physx::PxClientID)jarg13; 
  arg14 = (physx::PxReal)jarg14; 
  result = (physx::PxI32)(arg1)->sweepMultiple((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,arg7,arg8,*arg9,(physx::PxQueryFilterData const &)*arg10,arg11,(physx::PxQueryCache const *)arg12,arg13,arg14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_sweepMultiple__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, unsigned int jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12, unsigned char jarg13) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxSweepHit *arg7 = (physx::PxSweepHit *) 0 ;
  physx::PxU32 arg8 ;
  bool *arg9 = 0 ;
  physx::PxQueryFilterData *arg10 = 0 ;
  physx::PxQueryFilterCallback *arg11 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg12 = (physx::PxQueryCache *) 0 ;
  physx::PxClientID arg13 ;
  physx::PxHitFlags *argp6 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxSweepHit *)jarg7; 
  arg8 = (physx::PxU32)jarg8; 
  arg9 = (bool *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return 0;
  } 
  arg10 = (physx::PxQueryFilterData *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg11 = (physx::PxQueryFilterCallback *)jarg11; 
  arg12 = (physx::PxQueryCache *)jarg12; 
  arg13 = (physx::PxClientID)jarg13; 
  result = (physx::PxI32)(arg1)->sweepMultiple((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,arg7,arg8,*arg9,(physx::PxQueryFilterData const &)*arg10,arg11,(physx::PxQueryCache const *)arg12,arg13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_sweepMultiple__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, unsigned int jarg8, void * jarg9, void * jarg10, void * jarg11, void * jarg12) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxSweepHit *arg7 = (physx::PxSweepHit *) 0 ;
  physx::PxU32 arg8 ;
  bool *arg9 = 0 ;
  physx::PxQueryFilterData *arg10 = 0 ;
  physx::PxQueryFilterCallback *arg11 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxQueryCache *arg12 = (physx::PxQueryCache *) 0 ;
  physx::PxHitFlags *argp6 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxSweepHit *)jarg7; 
  arg8 = (physx::PxU32)jarg8; 
  arg9 = (bool *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return 0;
  } 
  arg10 = (physx::PxQueryFilterData *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg11 = (physx::PxQueryFilterCallback *)jarg11; 
  arg12 = (physx::PxQueryCache *)jarg12; 
  result = (physx::PxI32)(arg1)->sweepMultiple((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,arg7,arg8,*arg9,(physx::PxQueryFilterData const &)*arg10,arg11,(physx::PxQueryCache const *)arg12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_sweepMultiple__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, unsigned int jarg8, void * jarg9, void * jarg10, void * jarg11) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxSweepHit *arg7 = (physx::PxSweepHit *) 0 ;
  physx::PxU32 arg8 ;
  bool *arg9 = 0 ;
  physx::PxQueryFilterData *arg10 = 0 ;
  physx::PxQueryFilterCallback *arg11 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxHitFlags *argp6 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxSweepHit *)jarg7; 
  arg8 = (physx::PxU32)jarg8; 
  arg9 = (bool *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return 0;
  } 
  arg10 = (physx::PxQueryFilterData *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg11 = (physx::PxQueryFilterCallback *)jarg11; 
  result = (physx::PxI32)(arg1)->sweepMultiple((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,arg7,arg8,*arg9,(physx::PxQueryFilterData const &)*arg10,arg11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_sweepMultiple__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, unsigned int jarg8, void * jarg9, void * jarg10) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxSweepHit *arg7 = (physx::PxSweepHit *) 0 ;
  physx::PxU32 arg8 ;
  bool *arg9 = 0 ;
  physx::PxQueryFilterData *arg10 = 0 ;
  physx::PxHitFlags *argp6 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxSweepHit *)jarg7; 
  arg8 = (physx::PxU32)jarg8; 
  arg9 = (bool *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return 0;
  } 
  arg10 = (physx::PxQueryFilterData *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  result = (physx::PxI32)(arg1)->sweepMultiple((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,arg7,arg8,*arg9,(physx::PxQueryFilterData const &)*arg10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_sweepMultiple__SWIG_5(void * jarg1, void * jarg2, void * jarg3, void * jarg4, float jarg5, void * jarg6, void * jarg7, unsigned int jarg8, void * jarg9) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxVec3 *arg4 = 0 ;
  physx::PxReal arg5 ;
  SwigValueWrapper< physx::PxFlags< enum physx::PxHitFlag::Enum,unsigned short > > arg6 ;
  physx::PxSweepHit *arg7 = (physx::PxSweepHit *) 0 ;
  physx::PxU32 arg8 ;
  bool *arg9 = 0 ;
  physx::PxHitFlags *argp6 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxVec3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxReal)jarg5; 
  argp6 = (physx::PxHitFlags *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null physx::PxHitFlags", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (physx::PxSweepHit *)jarg7; 
  arg8 = (physx::PxU32)jarg8; 
  arg9 = (bool *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & type is null", 0);
    return 0;
  } 
  result = (physx::PxI32)(arg1)->sweepMultiple((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,(physx::PxVec3 const &)*arg4,arg5,arg6,arg7,arg8,*arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_overlapMultiple__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, void * jarg6, void * jarg7, unsigned char jarg8) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxOverlapHit *arg4 = (physx::PxOverlapHit *) 0 ;
  physx::PxU32 arg5 ;
  physx::PxQueryFilterData *arg6 = 0 ;
  physx::PxQueryFilterCallback *arg7 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxClientID arg8 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxOverlapHit *)jarg4; 
  arg5 = (physx::PxU32)jarg5; 
  arg6 = (physx::PxQueryFilterData *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg7 = (physx::PxQueryFilterCallback *)jarg7; 
  arg8 = (physx::PxClientID)jarg8; 
  result = (physx::PxI32)(arg1)->overlapMultiple((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,arg4,arg5,(physx::PxQueryFilterData const &)*arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_overlapMultiple__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, void * jarg6, void * jarg7) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxOverlapHit *arg4 = (physx::PxOverlapHit *) 0 ;
  physx::PxU32 arg5 ;
  physx::PxQueryFilterData *arg6 = 0 ;
  physx::PxQueryFilterCallback *arg7 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxOverlapHit *)jarg4; 
  arg5 = (physx::PxU32)jarg5; 
  arg6 = (physx::PxQueryFilterData *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg7 = (physx::PxQueryFilterCallback *)jarg7; 
  result = (physx::PxI32)(arg1)->overlapMultiple((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,arg4,arg5,(physx::PxQueryFilterData const &)*arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_overlapMultiple__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, void * jarg6) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxOverlapHit *arg4 = (physx::PxOverlapHit *) 0 ;
  physx::PxU32 arg5 ;
  physx::PxQueryFilterData *arg6 = 0 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxOverlapHit *)jarg4; 
  arg5 = (physx::PxU32)jarg5; 
  arg6 = (physx::PxQueryFilterData *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  result = (physx::PxI32)(arg1)->overlapMultiple((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,arg4,arg5,(physx::PxQueryFilterData const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_overlapMultiple__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxOverlapHit *arg4 = (physx::PxOverlapHit *) 0 ;
  physx::PxU32 arg5 ;
  physx::PxI32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxOverlapHit *)jarg4; 
  arg5 = (physx::PxU32)jarg5; 
  result = (physx::PxI32)(arg1)->overlapMultiple((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_overlapAny__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, unsigned char jarg7) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxOverlapHit *arg4 = 0 ;
  physx::PxQueryFilterData *arg5 = 0 ;
  physx::PxQueryFilterCallback *arg6 = (physx::PxQueryFilterCallback *) 0 ;
  physx::PxClientID arg7 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxOverlapHit *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxOverlapHit & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxQueryFilterData *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg6 = (physx::PxQueryFilterCallback *)jarg6; 
  arg7 = (physx::PxClientID)jarg7; 
  result = (bool)(arg1)->overlapAny((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,*arg4,(physx::PxQueryFilterData const &)*arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_overlapAny__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxOverlapHit *arg4 = 0 ;
  physx::PxQueryFilterData *arg5 = 0 ;
  physx::PxQueryFilterCallback *arg6 = (physx::PxQueryFilterCallback *) 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxOverlapHit *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxOverlapHit & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxQueryFilterData *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  arg6 = (physx::PxQueryFilterCallback *)jarg6; 
  result = (bool)(arg1)->overlapAny((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,*arg4,(physx::PxQueryFilterData const &)*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_overlapAny__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxOverlapHit *arg4 = 0 ;
  physx::PxQueryFilterData *arg5 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxOverlapHit *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxOverlapHit & type is null", 0);
    return 0;
  } 
  arg5 = (physx::PxQueryFilterData *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxQueryFilterData const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->overlapAny((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,*arg4,(physx::PxQueryFilterData const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_overlapAny__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  PxGeometry *arg2 = 0 ;
  physx::PxTransform *arg3 = 0 ;
  physx::PxOverlapHit *arg4 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (PxGeometry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "PxGeometry const & type is null", 0);
    return 0;
  } 
  arg3 = (physx::PxTransform *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxTransform const & type is null", 0);
    return 0;
  } 
  arg4 = (physx::PxOverlapHit *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxOverlapHit & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->overlapAny((PxGeometry const &)*arg2,(physx::PxTransform const &)*arg3,*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getSceneQueryStaticTimestamp(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getSceneQueryStaticTimestamp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PxScene_getBroadPhaseType(void * jarg1) {
  int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBroadPhaseType::Enum result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxBroadPhaseType::Enum)((physx::PxScene const *)arg1)->getBroadPhaseType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getBroadPhaseCaps(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBroadPhaseCaps *arg2 = 0 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxBroadPhaseCaps *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBroadPhaseCaps & type is null", 0);
    return 0;
  } 
  result = (bool)((physx::PxScene const *)arg1)->getBroadPhaseCaps(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getNbBroadPhaseRegions(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getNbBroadPhaseRegions();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getBroadPhaseRegions__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBroadPhaseRegionInfo *arg2 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  physx::PxU32 arg3 ;
  physx::PxU32 arg4 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxBroadPhaseRegionInfo *)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  arg4 = (physx::PxU32)jarg4; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getBroadPhaseRegions(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getBroadPhaseRegions__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBroadPhaseRegionInfo *arg2 = (physx::PxBroadPhaseRegionInfo *) 0 ;
  physx::PxU32 arg3 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxBroadPhaseRegionInfo *)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getBroadPhaseRegions(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_addBroadPhaseRegion__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBroadPhaseRegion *arg2 = 0 ;
  bool arg3 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxBroadPhaseRegion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBroadPhaseRegion const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (physx::PxU32)(arg1)->addBroadPhaseRegion((physx::PxBroadPhaseRegion const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_addBroadPhaseRegion__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxBroadPhaseRegion *arg2 = 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxBroadPhaseRegion *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxBroadPhaseRegion const & type is null", 0);
    return 0;
  } 
  result = (physx::PxU32)(arg1)->addBroadPhaseRegion((physx::PxBroadPhaseRegion const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_removeBroadPhaseRegion(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  bool result;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  result = (bool)(arg1)->removeBroadPhaseRegion(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_getTaskManager(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxTaskManager *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxTaskManager *)((physx::PxScene const *)arg1)->getTaskManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_lockRead__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  char *arg2 = (char *) 0 ;
  physx::PxU32 arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  (arg1)->lockRead((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_lockRead__SWIG_1(void * jarg1, char * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->lockRead((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_lockRead__SWIG_2(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  (arg1)->lockRead();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_unlockRead(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  (arg1)->unlockRead();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_lockWrite__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  char *arg2 = (char *) 0 ;
  physx::PxU32 arg3 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (physx::PxU32)jarg3; 
  (arg1)->lockWrite((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_lockWrite__SWIG_1(void * jarg1, char * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->lockWrite((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_lockWrite__SWIG_2(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  (arg1)->lockWrite();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_unlockWrite(void * jarg1) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  (arg1)->unlockWrite();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setNbContactDataBlocks(void * jarg1, unsigned int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  (arg1)->setNbContactDataBlocks(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getNbContactDataBlocksUsed(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getNbContactDataBlocksUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getMaxNbContactDataBlocksUsed(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getMaxNbContactDataBlocksUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getContactReportStreamBufferSize(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getContactReportStreamBufferSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_setSolverBatchSize(void * jarg1, unsigned int jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 arg2 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxU32)jarg2; 
  (arg1)->setSolverBatchSize(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PxScene_getSolverBatchSize(void * jarg1) {
  unsigned int jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxU32 result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxU32)((physx::PxScene const *)arg1)->getSolverBatchSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PxScene_getWakeCounterResetValue(void * jarg1) {
  float jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxReal result;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (physx::PxReal)((physx::PxScene const *)arg1)->getWakeCounterResetValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_shiftOrigin(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  physx::PxVec3 *arg2 = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (physx::PxVec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "physx::PxVec3 const & type is null", 0);
    return ;
  } 
  (arg1)->shiftOrigin((physx::PxVec3 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PxScene_userData_set(void * jarg1, void * jarg2) {
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PxScene_userData_get(void * jarg1) {
  void * jresult ;
  physx::PxScene *arg1 = (physx::PxScene *) 0 ;
  void *result = 0 ;
  
  arg1 = (physx::PxScene *)jarg1; 
  result = (void *) ((arg1)->userData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT physx::PxActorShape * SWIGSTDCALL CSharp_PxQueryHit_SWIGUpcast(physx::PxQueryHit *jarg1) {
    return (physx::PxActorShape *)jarg1;
}

SWIGEXPORT physx::PxQueryHit * SWIGSTDCALL CSharp_PxLocationHit_SWIGUpcast(physx::PxLocationHit *jarg1) {
    return (physx::PxQueryHit *)jarg1;
}

SWIGEXPORT physx::PxLocationHit * SWIGSTDCALL CSharp_PxRaycastHit_SWIGUpcast(physx::PxRaycastHit *jarg1) {
    return (physx::PxLocationHit *)jarg1;
}

SWIGEXPORT physx::PxQueryHit * SWIGSTDCALL CSharp_PxOverlapHit_SWIGUpcast(physx::PxOverlapHit *jarg1) {
    return (physx::PxQueryHit *)jarg1;
}

SWIGEXPORT physx::PxLocationHit * SWIGSTDCALL CSharp_PxSweepHit_SWIGUpcast(physx::PxSweepHit *jarg1) {
    return (physx::PxLocationHit *)jarg1;
}

#ifdef __cplusplus
}
#endif

